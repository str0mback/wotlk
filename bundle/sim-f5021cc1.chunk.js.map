{"version":3,"file":"sim-f5021cc1.chunk.js","sources":["../../../ui/warlock/tooltips.ts","../../../ui/warlock/presets.ts","../../../ui/warlock/inputs.ts","../../../ui/warlock/sim.ts"],"sourcesContent":["export const BIS_TOOLTIP = 'This gear preset is inspired from Zephan\\'s Affliction guide: https://www.warcrafttavern.com/wotlk/guides/pve-affliction-warlock/';\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tPetFood,\n\tGlyphs,\n\tEquipmentSpec,\n\tPotions,\n\tRaidBuffs,\n\tIndividualBuffs,\n\tDebuffs,\n\tTristateEffect,\n\tSpec,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport { Player } from '../core/player.js';\n\nimport {\n\tWarlock_Rotation as WarlockRotation,\n\tWarlock_Options as WarlockOptions,\n\tWarlock_Rotation_PrimarySpell as PrimarySpell,\n\tWarlock_Rotation_SecondaryDot as SecondaryDot,\n\tWarlock_Rotation_SpecSpell as SpecSpell,\n\tWarlock_Rotation_Curse as Curse,\n\tWarlock_Rotation_Type as RotationType,\n\tWarlock_Options_WeaponImbue as WeaponImbue,\n\tWarlock_Options_Armor as Armor,\n\tWarlock_Options_Summon as Summon,\n\tWarlockMajorGlyph as MajorGlyph,\n\tWarlockMinorGlyph as MinorGlyph,\n} from '../core/proto/warlock.js';\n\nimport * as WarlockTooltips from './tooltips.js';\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\n\nexport const AfflictionTalents = {\n\tname: 'Affliction',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2350002030023510253500331151--550000051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfQuickDecay,\n\t\t\tmajor2: MajorGlyph.GlyphOfLifeTap,\n\t\t\tmajor3: MajorGlyph.GlyphOfHaunt,\n\t\t\tminor1: MinorGlyph.GlyphOfSouls,\n\t\t\tminor2: MinorGlyph.GlyphOfDrainSoul,\n\t\t\tminor3: MinorGlyph.GlyphOfSubjugateDemon,\n\t\t}),\n\t}),\n};\n\nexport const DemonologyTalents = {\n\tname: 'Demonology',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-203203301035012530135201351-550000052',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfLifeTap,\n\t\t\tmajor2: MajorGlyph.GlyphOfQuickDecay,\n\t\t\tmajor3: MajorGlyph.GlyphOfFelguard,\n\t\t\tminor1: MinorGlyph.GlyphOfSouls,\n\t\t\tminor2: MinorGlyph.GlyphOfDrainSoul,\n\t\t\tminor3: MinorGlyph.GlyphOfSubjugateDemon,\n\t\t}),\n\t}),\n};\n\nexport const DestructionTalents = {\n\tname: 'Destruction',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-03310030003-05203205210331051335230351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: MajorGlyph.GlyphOfConflagrate,\n\t\t\tmajor2: MajorGlyph.GlyphOfLifeTap,\n\t\t\tmajor3: MajorGlyph.GlyphOfIncinerate,\n\t\t\tminor1: MinorGlyph.GlyphOfSouls,\n\t\t\tminor2: MinorGlyph.GlyphOfDrainSoul,\n\t\t\tminor3: MinorGlyph.GlyphOfSubjugateDemon,\n\t\t}),\n\t}),\n};\n\nexport const AfflictionRotation = WarlockRotation.create({\n\tprimarySpell: PrimarySpell.ShadowBolt,\n\tsecondaryDot: SecondaryDot.UnstableAffliction,\n\tspecSpell: SpecSpell.Haunt,\n\tcurse: Curse.Agony,\n\tcorruption: true,\n\tuseInfernal: false,\n\tdetonateSeed: true,\n});\n\nexport const DemonologyRotation = WarlockRotation.create({\n\tprimarySpell: PrimarySpell.ShadowBolt,\n\tsecondaryDot: SecondaryDot.Immolate,\n\tspecSpell: SpecSpell.NoSpecSpell,\n\tcurse: Curse.Doom,\n\tcorruption: true,\n\tuseInfernal: false,\n\tdetonateSeed: true,\n});\n\nexport const DestructionRotation = WarlockRotation.create({\n\tprimarySpell: PrimarySpell.Incinerate,\n\tsecondaryDot: SecondaryDot.Immolate,\n\tspecSpell: SpecSpell.ChaosBolt,\n\tcurse: Curse.Doom,\n\tcorruption: false,\n\tuseInfernal: false,\n\tdetonateSeed: true,\n});\n\nexport const AfflictionOptions = WarlockOptions.create({\n\tarmor: Armor.FelArmor,\n\tsummon: Summon.Felhunter,\n\tweaponImbue: WeaponImbue.GrandSpellstone,\n});\n\nexport const DemonologyOptions = WarlockOptions.create({\n\tarmor: Armor.FelArmor,\n\tsummon: Summon.Felguard,\n\tweaponImbue: WeaponImbue.GrandSpellstone,\n});\n\nexport const DestructionOptions = WarlockOptions.create({\n\tarmor: Armor.FelArmor,\n\tsummon: Summon.Imp,\n\tweaponImbue: WeaponImbue.GrandFirestone,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n\tpetFood: PetFood.PetFoodSpicedMammothTreats,\n\tdefaultPotion: Potions.PotionOfWildMagic,\n\tprepopPotion: Potions.PotionOfWildMagic,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tdivineSpirit: true,\n\ttrueshotAura: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ticyTalons: true,\n\ttotemOfWrath: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\twrathOfAirTotem: true,\n\tsanctifiedRetribution: true,\n\tbloodlust: true,\n\tdemonicPact: 500,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\tvampiricTouch: true,\n});\n\nexport const DestroIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tsunderArmor: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tbloodFrenzy: true,\n\tebonPlaguebringer: true,\n\theartOfTheCrusader: true,\n\tjudgementOfWisdom: true,\n});\n\nexport const DestroDebuffs = Debuffs.create({\n\tsunderArmor: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tbloodFrenzy: true,\n\tebonPlaguebringer: true,\n\theartOfTheCrusader: true,\n\tjudgementOfWisdom: true,\n\tshadowMastery: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 25,\n};\n\nexport const SWP_BIS = {\n\tname: 'Straight Outa SWP',\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 34340,\n\t\t\t\"enchant\": 3002,\n\t\t\t\"gems\": [\n\t\t\t\t34220,\n\t\t\t\t32215\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34204\n\t\t},\n\t\t{\n\t\t\t\"id\": 31054,\n\t\t\t\"enchant\": 2982,\n\t\t\t\"gems\": [\n\t\t\t\t32215,\n\t\t\t\t35760\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34242,\n\t\t\t\"enchant\": 2621,\n\t\t\t\"gems\": [\n\t\t\t\t32196\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34364,\n\t\t\t\"enchant\": 2661,\n\t\t\t\"gems\": [\n\t\t\t\t32196,\n\t\t\t\t35488,\n\t\t\t\t32196\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34436,\n\t\t\t\"enchant\": 2650,\n\t\t\t\"gems\": [\n\t\t\t\t35760,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34344,\n\t\t\t\"enchant\": 2937,\n\t\t\t\"gems\": [\n\t\t\t\t35760,\n\t\t\t\t32196,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34541,\n\t\t\t\"gems\": [\n\t\t\t\t35760,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34181,\n\t\t\t\"enchant\": 2748,\n\t\t\t\"gems\": [\n\t\t\t\t32196,\n\t\t\t\t32196,\n\t\t\t\t35760\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34564,\n\t\t\t\"enchant\": 2940,\n\t\t\t\"gems\": [\n\t\t\t\t35760\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34362,\n\t\t\t\"enchant\": 2928\n\t\t},\n\t\t{\n\t\t\t\"id\": 34230,\n\t\t\t\"enchant\": 2928\n\t\t},\n\t\t{\n\t\t\t\"id\": 32483\n\t\t},\n\t\t{\n\t\t\t\"id\": 34429\n\t\t},\n\t\t{\n\t\t\t\"id\": 34336,\n\t\t\t\"enchant\": 2672\n\t\t},\n\t\t{\n\t\t\t\"id\": 34179\n\t\t},\n\t\t{\n\t\t\t\"id\": 34347,\n\t\t\t\"gems\": [\n\t\t\t\t35760\n\t\t\t]\n\t\t}\n  ]}`),\n};\nexport const P1_PreBiS_11 = {\n\tname: 'Pre-Raid Affliction',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n\tenableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Affliction,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 44910,\n\t\t\t\"enchant\": 3820,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42647,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34210,\n\t\t\t\"enchant\": 3810,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 41610,\n\t\t\t\"enchant\": 3722\n\t\t},\n\t\t{\n\t\t\t\"id\": 39497,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37361,\n\t\t\t\"enchant\": 2332,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42113,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40696,\n\t\t\t\"gems\": [\n\t\t\t\t40051,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34181,\n\t\t\t\"enchant\": 3719,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44202,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 43253,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37694\n\t\t},\n\t\t{\n\t\t\t\"id\": 40682\n\t\t},\n\t\t{\n\t\t\t\"id\": 37873\n\t\t},\n\t\t{\n\t\t\t\"id\": 45085,\n\t\t\t\"enchant\": 3834\n\t\t},\n\t\t{\n\t\t\t\"id\": 40698\n\t\t},\n\t\t{\n\t\t\t\"id\": 34348,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t}\n  ]}`),\n}\nexport const P1_Preset_Demo_Destro = {\n\tname: 'P1 Demo / Destro',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n\tenableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Demonology || player.getRotation().type == RotationType.Destruction,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 40421,\n\t\t\t\"enchant\": 3820,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44661,\n\t\t\t\"gems\": [\n\t\t\t\t40099\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40424,\n\t\t\t\"enchant\": 3810,\n\t\t\t\"gems\": [\n\t\t\t\t40049\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44005,\n\t\t\t\"enchant\": 3722,\n\t\t\t\"gems\": [\n\t\t\t\t40099\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40423,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t40049,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44008,\n\t\t\t\"enchant\": 2332,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40420,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40561,\n\t\t\t\"gems\": [\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40560,\n\t\t\t\"enchant\": 3719\n\t\t},\n\t\t{\n\t\t\t\"id\": 40558,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 40399\n\t\t},\n\t\t{\n\t\t\t\"id\": 40719\n\t\t},\n\t\t{\n\t\t\t\"id\": 40432\n\t\t},\n\t\t{\n\t\t\t\"id\": 40255\n\t\t},\n\t\t{\n\t\t\t\"id\": 40396,\n\t\t\t\"enchant\": 3834\n\t\t},\n\t\t{\n\t\t\t\"id\": 39766\n\t\t},\n\t\t{\n\t\t\t\"id\": 39712\n\t\t}\n  ]}`),\n}\n\n\n// will have only rare gems, but a Lightweave Embroidery on cloak.\nexport const P1_Preset_Affliction = {\n\tname: 'P1 Affliction',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n\tenableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Affliction,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 40421,\n\t\t\t\"enchant\": 3820,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44661,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40424,\n\t\t\t\"enchant\": 3810,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44005,\n\t\t\t\"enchant\": 3722,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40423,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44008,\n\t\t\t\"enchant\": 2332,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40420,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40561,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40560,\n\t\t\t\"enchant\": 3719\n\t\t},\n\t\t{\n\t\t\t\"id\": 40558,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 40399\n\t\t},\n\t\t{\n\t\t\t\"id\": 40719\n\t\t},\n\t\t{\n\t\t\t\"id\": 40432\n\t\t},\n\t\t{\n\t\t\t\"id\": 40255\n\t\t},\n\t\t{\n\t\t\t\"id\": 40396,\n\t\t\t\"enchant\": 3834\n\t\t},\n\t\t{\n\t\t\t\"id\": 39766\n\t\t},\n\t\t{\n\t\t\t\"id\": 39712\n\t\t}\n  ]}`),\n}\n\n\nexport const P1_PreBiS_14 = {\n\tname: 'Pre-Raid',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n\tenableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Demonology || player.getRotation().type == RotationType.Destruction,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 44910,\n\t\t\t\"enchant\": 3820,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42647,\n\t\t\t\"gems\": [\n\t\t\t\t40049\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34210,\n\t\t\t\"enchant\": 3810,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 41610,\n\t\t\t\"enchant\": 3722\n\t\t},\n\t\t{\n\t\t\t\"id\": 39497,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37361,\n\t\t\t\"enchant\": 2332,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 42113,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40696,\n\t\t\t\"gems\": [\n\t\t\t\t40014,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 34181,\n\t\t\t\"enchant\": 3719,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44202,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 43253,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37694\n\t\t},\n\t\t{\n\t\t\t\"id\": 40682\n\t\t},\n\t\t{\n\t\t\t\"id\": 37873\n\t\t},\n\t\t{\n\t\t\t\"id\": 45085,\n\t\t\t\"enchant\": 3834\n\t\t},\n\t\t{\n\t\t\t\"id\": 40698\n\t\t},\n\t\t{\n\t\t\t\"id\": 34348,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t}\n  ]}`),\n}\n\nexport const P2_Preset_Affliction = {\n\tname: 'P2 Affliction',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n\tenableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Affliction,\n\t\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 45497,\n\t\t\t\"enchant\": 3820,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t45883\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45133,\n\t\t\t\"gems\": [\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46068,\n\t\t\t\"enchant\": 3810,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40049\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45618,\n\t\t\t\"enchant\": 3722,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46137,\n\t\t\t\"enchant\": 1144,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45446,\n\t\t\t\"enchant\": 2332,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45665,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45619,\n\t\t\t\"enchant\": 3601,\n\t\t\t\"gems\": [\n\t\t\t\t40051,\n\t\t\t\t40051,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46139,\n\t\t\t\"enchant\": 3872,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45135,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45495,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46046,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45518\n\t\t},\n\t\t{\n\t\t\t\"id\": 45466\n\t\t},\n\t\t{\n\t\t\t\"id\": 45620,\n\t\t\t\"enchant\": 3834,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45617\n\t\t},\n\t\t{\n\t\t\t\"id\": 45294,\n\t\t\t\"gems\": [\n\t\t\t\t40051\n\t\t\t]\n\t\t}\n\t]}`),\n}\n\nexport const P2_Preset_Demo_Destro = {\n\tname: 'P2 Demo / Destro',\n\ttooltip: WarlockTooltips.BIS_TOOLTIP,\n\tenableWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Demonology || player.getRotation().type == RotationType.Destruction,\n\t\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 45497,\n\t\t\t\"enchant\": 3820,\n\t\t\t\"gems\": [\n\t\t\t\t41285,\n\t\t\t\t45883\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45243,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46068,\n\t\t\t\"enchant\": 3810,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45618,\n\t\t\t\"enchant\": 3722,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46137,\n\t\t\t\"enchant\": 1144,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t40051\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45446,\n\t\t\t\"enchant\": 2332,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45520,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45619,\n\t\t\t\"enchant\": 3601,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46139,\n\t\t\t\"enchant\": 3872,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45135,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39998,\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45495,\n\t\t\t\"gems\": [\n\t\t\t\t40026\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45297,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45518\n\t\t},\n\t\t{\n\t\t\t\"id\": 45148\n\t\t},\n\t\t{\n\t\t\t\"id\": 45620,\n\t\t\t\"enchant\": 3834,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45617\n\t\t},\n\t\t{\n\t\t\t\"id\": 45294,\n\t\t\t\"gems\": [\n\t\t\t\t39998\n\t\t\t]\n\t\t}\n\t]}`),\n}\n\nexport const Naked = {\n\tname: 'The Naked Bolt',\n\tgear: EquipmentSpec.fromJsonString(`\n    {\"items\":\n      [\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        {}\n      ]\n    }\n  `),\n}\n\n","import {\n\tWarlock_Options as WarlockOptions,\n\tWarlock_Rotation_Type as RotationType,\n\tWarlock_Rotation_Preset as RotationPreset,\n\tWarlock_Rotation_PrimarySpell as PrimarySpell,\n\tWarlock_Rotation_SecondaryDot as SecondaryDot,\n\tWarlock_Rotation_SpecSpell as SpecSpell,\n\tWarlock_Rotation_Curse as Curse,\n\tWarlock_Options_WeaponImbue as WeaponImbue,\n\tWarlock_Options_Armor as Armor,\n\tWarlock_Options_Summon as Summon,\n} from '../core/proto/warlock.js';\n\nimport { RaidTarget, Spec, Glyphs, Debuffs, IndividualBuffs, RaidBuffs, ItemSwap, ItemSlot } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { Sim } from '../core/sim.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { Target } from '../core/target.js';\nimport { SimUI, SimWarning } from '../core/sim_ui.js';\n\nimport { IconPickerConfig } from '../core/components/icon_picker.js';\nimport { IconEnumPicker, IconEnumPickerConfig, IconEnumValueConfig } from '../core/components/icon_enum_picker.js';\nimport * as Presets from './presets.js';\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ArmorInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, Armor>({\n\tfieldName: 'armor',\n\tvalues: [\n\t\t{ value: Armor.NoArmor, tooltip: 'No Armor' },\n\t\t{ actionId: ActionId.fromSpellId(47893), value: Armor.FelArmor },\n\t\t{ actionId: ActionId.fromSpellId(47889), value: Armor.DemonArmor },\n\t],\n});\n\nexport const WeaponImbueInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, WeaponImbue>({\n\tfieldName: 'weaponImbue',\n\tvalues: [\n\t\t{ value: WeaponImbue.NoWeaponImbue, tooltip: 'No Weapon Stone' },\n\t\t{ actionId: ActionId.fromItemId(41174), value: WeaponImbue.GrandFirestone },\n\t\t{ actionId: ActionId.fromItemId(41196), value: WeaponImbue.GrandSpellstone },\n\t],\n});\n\nexport const PetInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarlock, Summon>({\n\tfieldName: 'summon',\n\tvalues: [\n\t\t{ value: Summon.NoSummon, tooltip: 'No Pet' },\n\t\t{ actionId: ActionId.fromSpellId(688), value: Summon.Imp },\n\t\t{ actionId: ActionId.fromSpellId(712), value: Summon.Succubus },\n\t\t{ actionId: ActionId.fromSpellId(691), value: Summon.Felhunter },\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(30146), value: Summon.Felguard,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().summonFelguard,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n});\n\nexport const PrimarySpellInput = InputHelpers.makeRotationEnumIconInput<Spec.SpecWarlock, PrimarySpell>({\n\tfieldName: 'primarySpell',\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(47809), value: PrimarySpell.ShadowBolt },\n\t\t{ actionId: ActionId.fromSpellId(47838), value: PrimarySpell.Incinerate },\n\t\t{ actionId: ActionId.fromSpellId(47836), value: PrimarySpell.Seed },\n\t],\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\tconst newRotation = player.getRotation();\n\t\tif (newValue == PrimarySpell.Seed && newRotation.corruption == true) {\n\t\t\tnewRotation.corruption = false\n\t\t}\n\t\tnewRotation.primarySpell = newValue\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n});\n\nexport const SecondaryDotInput = InputHelpers.makeRotationEnumIconInput<Spec.SpecWarlock, SecondaryDot>({\n\tfieldName: 'secondaryDot',\n\tvalues: [\n\t\t{ value: SecondaryDot.NoSecondaryDot },\n\t\t{ actionId: ActionId.fromSpellId(47811), value: SecondaryDot.Immolate },\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(47843), value: SecondaryDot.UnstableAffliction,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().unstableAffliction,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\tconst newRotation = player.getRotation();\n\t\tnewRotation.secondaryDot = newValue;\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n});\n\nexport const SpecSpellInput = InputHelpers.makeRotationEnumIconInput<Spec.SpecWarlock, SpecSpell>({\n\tfieldName: 'specSpell',\n\tvalues: [\n\t\t{ value: SpecSpell.NoSpecSpell },\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(59164), value: SpecSpell.Haunt,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().haunt,\n\t\t},\n\t\t{\n\t\t\tactionId: ActionId.fromSpellId(59172), value: SpecSpell.ChaosBolt,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().chaosBolt,\n\t\t},\n\t],\n\tchangeEmitter: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getTalents().haunt || player.getTalents().chaosBolt,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\tconst newRotation = player.getRotation();\n\t\tnewRotation.specSpell = newValue;\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n});\n\n\nexport const CorruptionSpell = {\n\ttype: 'icon' as const,\n\tid: ActionId.fromSpellId(47813),\n\tstates: 2,\n\textraCssClasses: [\n\t\t'Corruption-picker',\n\t],\n\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.changeEmitter,\n\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().corruption,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: boolean) => {\n\t\tconst newRotation = player.getRotation();\n\t\tif (newRotation.primarySpell == PrimarySpell.Seed && newValue == true) {\n\t\t\tnewRotation.primarySpell = PrimarySpell.ShadowBolt\n\t\t}\n\t\tnewRotation.corruption = newValue;\n\t\tnewRotation.preset = RotationPreset.Manual;\n\t\tplayer.setRotation(eventID, newRotation);\n\t},\n};\n\nexport const WarlockRotationConfig = {\n\tinputs: [\n\t\t{\n\t\t\ttype: 'enum' as const,\n\n\t\t\tlabel: 'Sim presets',\n\t\t\tlabelTooltip: 'Quick switch between sim spec presets. Will UPDATE TALENTS and SPELLS to defaults.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Affliction', value: RotationType.Affliction },\n\t\t\t\t{ name: 'Demonology', value: RotationType.Demonology },\n\t\t\t\t{ name: 'Destruction', value: RotationType.Destruction },\n\t\t\t],\n\t\t\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.rotationChangeEmitter,\n\t\t\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().type,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\t\t\tvar newRotation = player.getRotation();\n\t\t\t\tvar newOptions: WarlockOptions;\n\t\t\t\tvar newGlyphs: Glyphs;\n\t\t\t\tvar newTalents: string;\n\t\t\t\tif (newValue == RotationType.Affliction) {\n\t\t\t\t\tnewTalents = Presets.AfflictionTalents.data.talentsString\n\t\t\t\t\tnewGlyphs = Presets.AfflictionTalents.data.glyphs || Glyphs.create();\n\t\t\t\t\tnewRotation = Presets.AfflictionRotation\n\t\t\t\t\tnewOptions = Presets.AfflictionOptions\n\t\t\t\t} else if (newValue == RotationType.Demonology) {\n\t\t\t\t\tnewTalents = Presets.DemonologyTalents.data.talentsString\n\t\t\t\t\tnewGlyphs = Presets.DemonologyTalents.data.glyphs || Glyphs.create();\n\t\t\t\t\tnewRotation = Presets.DemonologyRotation\n\t\t\t\t\tnewOptions = Presets.DemonologyOptions\n\t\t\t\t} else if (newValue == RotationType.Destruction) {\n\t\t\t\t\tnewTalents = Presets.DestructionTalents.data.talentsString\n\t\t\t\t\tnewGlyphs = Presets.DestructionTalents.data.glyphs || Glyphs.create();\n\t\t\t\t\tnewRotation = Presets.DestructionRotation\n\t\t\t\t\tnewOptions = Presets.DestructionOptions\n\t\t\t\t}\n\t\t\t\tnewRotation.type = newValue;\n\t\t\t\tnewRotation.preset = RotationPreset.Automatic;\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tplayer.setTalentsString(eventID, newTalents);\n\t\t\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t\t\t\tplayer.setGlyphs(eventID, newGlyphs);\n\t\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\n\t\t{\n\t\t\ttype: 'enum' as const,\n\t\t\tlabel: 'Spell & Talent',\n\t\t\tlabelTooltip: 'Putting it on Automatic will UPDATE talents and spells to defaults.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"Manual\", value: RotationPreset.Manual },\n\t\t\t\t{ name: \"Automatic\", value: RotationPreset.Automatic },\n\t\t\t],\n\t\t\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.rotationChangeEmitter,\n\t\t\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().preset,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\t\t\tvar newRotation = player.getRotation();\n\t\t\t\tif (newValue == RotationPreset.Automatic) {\n\t\t\t\t\tvar newOptions: WarlockOptions;\n\t\t\t\t\tvar newGlyphs: Glyphs;\n\t\t\t\t\tvar newTalents: string;\n\t\t\t\t\tif (newRotation.type == RotationType.Affliction) {\n\t\t\t\t\t\tnewTalents = Presets.AfflictionTalents.data.talentsString\n\t\t\t\t\t\tnewGlyphs = Presets.AfflictionTalents.data.glyphs || Glyphs.create()\n\t\t\t\t\t\tnewRotation = Presets.AfflictionRotation\n\t\t\t\t\t\tnewOptions = Presets.AfflictionOptions\n\t\t\t\t\t} else if (newRotation.type == RotationType.Demonology) {\n\t\t\t\t\t\tnewTalents = Presets.DemonologyTalents.data.talentsString\n\t\t\t\t\t\tnewGlyphs = Presets.DemonologyTalents.data.glyphs || Glyphs.create()\n\t\t\t\t\t\tnewRotation = Presets.DemonologyRotation\n\t\t\t\t\t\tnewOptions = Presets.DemonologyOptions\n\t\t\t\t\t} else if (newRotation.type == RotationType.Destruction) {\n\t\t\t\t\t\tnewTalents = Presets.DestructionTalents.data.talentsString\n\t\t\t\t\t\tnewGlyphs = Presets.DestructionTalents.data.glyphs || Glyphs.create()\n\t\t\t\t\t\tnewRotation = Presets.DestructionRotation\n\t\t\t\t\t\tnewOptions = Presets.DestructionOptions\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewRotation.preset = newValue;\n\t\t\t\tconst raid = player.getRaid();\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tif (newValue == RotationPreset.Automatic) {\n\t\t\t\t\t\tplayer.setTalentsString(eventID, newTalents);\n\t\t\t\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t\t\t\t\tplayer.setGlyphs(eventID, newGlyphs);\n\t\t\t\t\t}\n\t\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'enum' as const,\n\t\t\tlabel: 'Curse',\n\t\t\tlabelTooltip: 'Manual curse selection.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"None\", value: Curse.NoCurse },\n\t\t\t\t{ name: \"Elements\", value: Curse.Elements },\n\t\t\t\t{ name: \"Weakness\", value: Curse.Weakness },\n\t\t\t\t{ name: \"Doom\", value: Curse.Doom },\n\t\t\t\t{ name: \"Agony\", value: Curse.Agony },\n\t\t\t\t{ name: \"Tongues\", value: Curse.Tongues }\n\t\t\t],\n\t\t\tchangedEvent: (player: Player<Spec.SpecWarlock>) => player.rotationChangeEmitter,\n\t\t\tgetValue: (player: Player<Spec.SpecWarlock>) => player.getRotation().curse,\n\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecWarlock>, newValue: number) => {\n\t\t\t\tconst newRotation = player.getRotation();\n\t\t\t\tnewRotation.curse = newValue;\n\t\t\t\tnewRotation.preset = RotationPreset.Manual;\n\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t},\n\t\t},\n\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarlock>({\n\t\t\tfieldName: 'useInfernal',\n\t\t\tlabel: 'Summon Infernal',\n\t\t\tlabelTooltip: 'Casts Inferno 60s before the fight is over',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarlock>({\n\t\t\tfieldName: 'detonateSeed',\n\t\t\tlabel: 'Detonate Seed on Cast',\n\t\t\tlabelTooltip: 'Simulates raid doing damage to targets such that seed detonates immediately on cast.',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().primarySpell == PrimarySpell.Seed,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarlock>({\n\t\t\tfieldName: 'enableWeaponSwap',\n\t\t\tlabel: 'Enable Weapon Swapping',\n\t\t\tlabelTooltip: 'Toggle on/off item swapping',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => player.getRotation().type == RotationType.Affliction\n\t\t}),\n\t\tInputHelpers.MakeItemSwapInput<Spec.SpecWarlock>({\n\t\t\tfieldName: 'weaponSwap',\n\t\t\tvalues: [\n\t\t\t\tItemSlot.ItemSlotMainHand,\n\t\t\t\tItemSlot.ItemSlotOffHand,\n\t\t\t\tItemSlot.ItemSlotRanged,\n\t\t\t],\n\t\t\tlabelTooltip: 'Start with the swapped items until Corruption has been cast, then swap back to normal gear set. If a slot is empty it will not be used in the swap',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarlock>) => (player.getRotation().type == RotationType.Affliction && player.getRotation().enableWeaponSwap) || false\n\t\t}),\n\t],\n};\n","import {\n\tRaidBuffs,\n\tPartyBuffs,\n\tIndividualBuffs,\n\tDebuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n\tRace,\n} from '../core/proto/common.js';\n\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\nimport { TypedEvent } from '../core/typed_event.js';\n\nimport {\n\tWarlock,\n\tWarlock_Rotation as WarlockRotation,\n\tWarlockTalents as WarlockTalents,\n\tWarlock_Options as WarlockOptions,\n\tWarlock_Options_Armor as Armor,\n\tWarlock_Options_Summon as Summon,\n\tWarlock_Options_WeaponImbue as WeaponImbue,\n} from '../core/proto/warlock.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as WarlockInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class WarlockSimUI extends IndividualSimUI<Spec.SpecWarlock> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarlock>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'warlock-sim-ui',\n\t\t\tcssScheme: 'warlock',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t\t\"Several secondary spells need to be implemented.\",\n\t\t\t\t\"Rotations will be optimized.\",\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatStamina,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. DPS classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatSpellPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatIntellect,\n\t\t\t\tStat.StatSpirit,\n\t\t\t\tStat.StatSpellPower,\n\t\t\t\tStat.StatSpellHit,\n\t\t\t\tStat.StatSpellCrit,\n\t\t\t\tStat.StatSpellHaste,\n\t\t\t\tStat.StatMP5,\n\t\t\t\tStat.StatStamina,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P2_Preset_Affliction.gear,\n\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatIntellect]: 0.18,\n\t\t\t\t\t[Stat.StatSpirit]: 0.54,\n\t\t\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t\t\t[Stat.StatSpellHit]: 0.93,\n\t\t\t\t\t[Stat.StatSpellCrit]: 0.53,\n\t\t\t\t\t[Stat.StatSpellHaste]: 0.81,\n\t\t\t\t\t[Stat.StatStamina]: 0.01,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.AfflictionRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.AfflictionTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.AfflictionOptions,\n\n\t\t\t\t// Default buffs and debuffs settings.\n\t\t\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\t\t\tpartyBuffs: PartyBuffs.create({}),\n\n\t\t\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\n\t\t\t\tdebuffs: Presets.DefaultDebuffs,\n\n\t\t\t\tother: Presets.OtherDefaults,\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t\tWarlockInputs.PetInput,\n\t\t\t\tWarlockInputs.ArmorInput,\n\t\t\t\tWarlockInputs.WeaponImbueInput,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationIconInputs: [\n\t\t\t\tWarlockInputs.PrimarySpellInput,\n\t\t\t\tWarlockInputs.CorruptionSpell,\n\t\t\t\tWarlockInputs.SecondaryDotInput,\n\t\t\t\tWarlockInputs.SpecSpellInput,\n\t\t\t],\n\t\t\trotationInputs: WarlockInputs.WarlockRotationConfig,\n\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.ReplenishmentBuff,\n\t\t\t\tIconInputs.MajorArmorDebuff,\n\t\t\t\tIconInputs.MinorArmorDebuff,\n\t\t\t\tIconInputs.PhysicalDamageDebuff,\n\t\t\t\tIconInputs.MeleeHasteBuff,\n\t\t\t\tIconInputs.MeleeCritBuff,\n\t\t\t\tIconInputs.MP5Buff,\n\t\t\t\tIconInputs.AttackPowerPercentBuff,\n\t\t\t\tIconInputs.AttackPowerBuff,\n\t\t\t\tIconInputs.StrengthAndAgilityBuff,\n\t\t\t\tIconInputs.StaminaBuff,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\tpetConsumeInputs: [\n\t\t\t\tIconInputs.SpicedMammothTreats,\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.AfflictionTalents,\n\t\t\t\t\tPresets.DemonologyTalents,\n\t\t\t\t\tPresets.DestructionTalents,\n\t\t\t\t],\n\t\t\t\t//Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\t// Presets.Naked,\n\t\t\t\t\tPresets.SWP_BIS,\n\t\t\t\t\tPresets.P1_PreBiS_11,\n\t\t\t\t\tPresets.P1_PreBiS_14,\n\t\t\t\t\tPresets.P1_Preset_Affliction,\n\t\t\t\t\tPresets.P1_Preset_Demo_Destro,\n\t\t\t\t\tPresets.P2_Preset_Affliction,\n\t\t\t\t\tPresets.P2_Preset_Demo_Destro,\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["BIS_TOOLTIP","AfflictionTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","major1","MajorGlyph","GlyphOfQuickDecay","major2","GlyphOfLifeTap","major3","GlyphOfHaunt","minor1","MinorGlyph","GlyphOfSouls","minor2","GlyphOfDrainSoul","minor3","GlyphOfSubjugateDemon","DemonologyTalents","GlyphOfFelguard","DestructionTalents","GlyphOfConflagrate","GlyphOfIncinerate","AfflictionRotation","WarlockRotation","primarySpell","PrimarySpell","ShadowBolt","secondaryDot","SecondaryDot","UnstableAffliction","specSpell","SpecSpell","Haunt","curse","Curse","Agony","corruption","useInfernal","detonateSeed","DemonologyRotation","Immolate","NoSpecSpell","Doom","DestructionRotation","Incinerate","ChaosBolt","AfflictionOptions","WarlockOptions","armor","Armor","FelArmor","summon","Summon","Felhunter","weaponImbue","WeaponImbue","GrandSpellstone","DemonologyOptions","Felguard","DestructionOptions","Imp","GrandFirestone","DefaultConsumes","Consumes","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","petFood","PetFood","PetFoodSpicedMammothTreats","defaultPotion","Potions","PotionOfWildMagic","prepopPotion","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","powerWordFortitude","strengthOfEarthTotem","arcaneBrilliance","divineSpirit","trueshotAura","leaderOfThePack","icyTalons","totemOfWrath","moonkinAura","wrathOfAirTotem","sanctifiedRetribution","bloodlust","demonicPact","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","vampiricTouch","DefaultDebuffs","Debuffs","sunderArmor","faerieFire","bloodFrenzy","ebonPlaguebringer","heartOfTheCrusader","judgementOfWisdom","shadowMastery","OtherDefaults","distanceFromTarget","SWP_BIS","gear","EquipmentSpec","fromJsonString","P1_PreBiS_11","tooltip","WarlockTooltips.BIS_TOOLTIP","enableWhen","player","getRotation","type","RotationType","Affliction","P1_Preset_Demo_Destro","Demonology","Destruction","P1_Preset_Affliction","P1_PreBiS_14","P2_Preset_Affliction","P2_Preset_Demo_Destro","ArmorInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","NoArmor","actionId","ActionId","fromSpellId","DemonArmor","WeaponImbueInput","NoWeaponImbue","fromItemId","PetInput","NoSummon","Succubus","showWhen","getTalents","summonFelguard","changeEmitter","PrimarySpellInput","InputHelpers.makeRotationEnumIconInput","Seed","setValue","eventID","newValue","newRotation","preset","RotationPreset","Manual","setRotation","SecondaryDotInput","NoSecondaryDot","unstableAffliction","SpecSpellInput","haunt","chaosBolt","CorruptionSpell","id","states","extraCssClasses","changedEvent","getValue","WarlockRotationConfig","inputs","label","labelTooltip","rotationChangeEmitter","newOptions","newGlyphs","newTalents","Presets.AfflictionTalents","Presets.AfflictionRotation","Presets.AfflictionOptions","Presets.DemonologyTalents","Presets.DemonologyRotation","Presets.DemonologyOptions","Presets.DestructionTalents","Presets.DestructionRotation","Presets.DestructionOptions","Automatic","TypedEvent","freezeAllAndDo","setTalentsString","setSpecOptions","setGlyphs","getRaid","NoCurse","Elements","Weakness","Tongues","InputHelpers.makeRotationBooleanInput","InputHelpers.MakeItemSwapInput","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","ItemSlotRanged","enableWeaponSwap","WarlockSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatStamina","epReferenceStat","displayStats","StatHealth","StatMP5","defaults","Presets.P2_Preset_Affliction","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","talents","specOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","WarlockInputs.PetInput","WarlockInputs.ArmorInput","WarlockInputs.WeaponImbueInput","rotationIconInputs","WarlockInputs.PrimarySpellInput","WarlockInputs.CorruptionSpell","WarlockInputs.SecondaryDotInput","WarlockInputs.SpecSpellInput","rotationInputs","WarlockInputs.WarlockRotationConfig","includeBuffDebuffInputs","IconInputs.ReplenishmentBuff","IconInputs.MajorArmorDebuff","IconInputs.MinorArmorDebuff","IconInputs.PhysicalDamageDebuff","IconInputs.MeleeHasteBuff","IconInputs.MeleeCritBuff","IconInputs.MP5Buff","IconInputs.AttackPowerPercentBuff","IconInputs.AttackPowerBuff","IconInputs.StrengthAndAgilityBuff","IconInputs.StaminaBuff","excludeBuffDebuffInputs","petConsumeInputs","IconInputs.SpicedMammothTreats","otherInputs","OtherInputs.DistanceFromTarget","OtherInputs.TankAssignment","encounterPicker","showExecuteProportion","presets","Presets.SWP_BIS","Presets.P1_PreBiS_11","Presets.P1_PreBiS_14","Presets.P1_Preset_Affliction","Presets.P1_Preset_Demo_Destro","Presets.P2_Preset_Demo_Destro"],"mappings":"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"}