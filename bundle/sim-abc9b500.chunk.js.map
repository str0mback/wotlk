{"version":3,"file":"sim-abc9b500.chunk.js","sources":["../../../ui/feral_druid/inputs.ts","../../../ui/feral_druid/presets.ts","../../../ui/feral_druid/sim.ts"],"sourcesContent":["import { RaidTarget, SpellSchool } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { NO_TARGET } from '../core/proto_utils/utils.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tFeralDruid,\n\tFeralDruid_Rotation as DruidRotation,\n\tFeralDruid_Rotation_AplType as AplType,\n\tFeralDruid_Rotation_BearweaveType as BearweaveType,\n\tFeralDruid_Rotation_BiteModeType as BiteModeType,\n\tFeralDruid_Options as DruidOptions,\n\tFeralDruid_Rotation_BiteModeType\n} from '../core/proto/druid.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecFeralDruid>({\n\tfieldName: 'innervateTarget',\n\tid: ActionId.fromSpellId(29166),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecFeralDruid>) => player.getSpecOptions().innervateTarget?.targetIndex != NO_TARGET,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecFeralDruid>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.innervateTarget = RaidTarget.create({\n\t\t\ttargetIndex: newValue ? 0 : NO_TARGET,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const LatencyMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecFeralDruid>({\n\tfieldName: 'latencyMs',\n\tlabel: 'Latency',\n\tlabelTooltip: 'Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued.',\n});\n\nexport const PrepopOoc = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'prepopOoc',\n\tlabel: 'Pre-pop Clearcasting',\n\tlabelTooltip: 'Start fight with clearcasting',\n\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().omenOfClarity,\n\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const PrepopBerserk = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'prePopBerserk',\n\tlabel: 'Pre-pop Berserk',\n\tlabelTooltip: 'Pre pop berserk 1 sec before fight',\n\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getTalents().berserk,\n\tchangeEmitter: (player: Player<Spec.SpecFeralDruid>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'assumeBleedActive',\n\tlabel: 'Assume Bleed Always Active',\n\tlabelTooltip: 'Assume bleed always exists for \\'Rend and Tear\\' calculations. Otherwise will only calculate based on own rip/rake/lacerate.',\n\textraCssClasses: ['within-raid-sim-hide'],\n})\n\nfunction ShouldShowAdvParamST(player: Player<Spec.SpecFeralDruid>): boolean {\n\tlet rot = player.getRotation();\n\treturn rot.manualParams && rot.rotationType == AplType.SingleTarget;\n}\n\nfunction ShouldShowAdvParamAoe(player: Player<Spec.SpecFeralDruid>): boolean {\n\tlet rot = player.getRotation();\n\treturn rot.manualParams && rot.rotationType == AplType.Aoe;\n}\n\nexport const FeralDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, AplType>({\n\t\t\tfieldName: 'rotationType',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: AplType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: AplType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'manualParams',\n\t\t\tlabel: 'Manual Advanced Parameters',\n\t\t\tlabelTooltip: 'Manually specify advanced parameters, otherwise will use preset defaults',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maxFfDelay',\n\t\t\tlabel: 'Max FF Delay',\n\t\t\tlabelTooltip: 'Max allowed delay to wait for ff to come off CD in seconds',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().manualParams,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'minRoarOffset',\n\t\t\tlabel: 'Roar Offset',\n\t\t\tlabelTooltip: 'Targeted offset in Rip/Roar timings',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'ripLeeway',\n\t\t\tlabel: 'Rip Leeway',\n\t\t\tlabelTooltip: 'Rip leeway when determining roar clips',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useRake',\n\t\t\tlabel: 'Use Rake',\n\t\t\tlabelTooltip: 'Use rake during rotation',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useBite',\n\t\t\tlabel: 'Bite during rotation',\n\t\t\tlabelTooltip: 'Use bite during rotation rather than just at end',\n\t\t\tshowWhen: ShouldShowAdvParamST,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'biteTime',\n\t\t\tlabel: 'Bite Time',\n\t\t\tlabelTooltip: 'Min seconds on Rip/Roar to bite',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => \n\t\t\tShouldShowAdvParamST(player) && player.getRotation().useBite == true && player.getRotation().biteModeType == BiteModeType.Emperical,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'flowerWeave',\n\t\t\tlabel: 'Flower Weave',\n\t\t\tlabelTooltip: 'Fish for clearcasting during rotation with gotw',\n\t\t\tshowWhen: ShouldShowAdvParamAoe,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'raidTargets',\n\t\t\tlabel: 'GotW Raid Targets',\n\t\t\tlabelTooltip: 'Raid size to assume for clearcast proc chance (can include pets as well, so 25 man raid potentically can be ~30)',\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => ShouldShowAdvParamAoe(player) && player.getRotation().flowerWeave == true,\n\t\t}),\n\t\t// Can be uncommented if/when analytical bite mode is added\n\t\t//InputHelpers.makeRotationEnumInput<Spec.SpecFeralDruid, BiteModeType>({\n\t\t//\tfieldName: 'biteModeType',\n\t\t//\tlabel: 'Bite Mode',\n\t\t//\tlabelTooltip: 'Underlying \"Bite logic\" to use',\n\t\t//\tvalues: [\n\t\t//\t\t{ name: 'Emperical', value: BiteModeType.Emperical },\n\t\t//\t],\n\t\t//\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().useBite == true\n\t\t//}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'hotUptime',\n\t\t\tlabel: 'Revitalize Hot Uptime',\n\t\t\tlabelTooltip: 'Hot uptime percentage to assume when theorizing energy gains',\n\t\t\tpercent: true,\n\t\t\tshowWhen: (player: Player<Spec.SpecFeralDruid>) => player.getRotation().useBite == true && player.getRotation().biteModeType == BiteModeType.Analytical,\n\t\t}),\n\t],\n};\n","import { Consumes } from '../core/proto/common.js';\nimport { Food } from '../core/proto/common.js';\nimport { EquipmentSpec } from '../core/proto/common.js';\nimport { Potions } from '../core/proto/common.js';\nimport { Flask } from '../core/proto/common.js';\nimport { Glyphs } from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tFeralDruid_Rotation as FeralDruidRotation,\n\tFeralDruid_Options as FeralDruidOptions,\n\tDruidMajorGlyph,\n\tDruidMinorGlyph,\n\tFeralDruid_Rotation_BearweaveType,\n\tFeralDruid_Rotation_BiteModeType,\n\tFeralDruid_Rotation_AplType,\n} from '../core/proto/druid.js';\n\nimport * as Tooltips from '../core/constants/tooltips.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-543202132322010053120030310511-203503012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfRip,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfSavageRoar,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfShred,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfDash,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfTheWild,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t}),\n\t}),\n};\n\nexport const DefaultRotation = FeralDruidRotation.create({\n\trotationType: FeralDruid_Rotation_AplType.SingleTarget,\n\n\tbearWeaveType: FeralDruid_Rotation_BearweaveType.None,\n\tminCombosForRip: 5,\n\tminCombosForBite: 5,\n\n\tuseRake: true,\n\tuseBite: true,\n\tmangleSpam: false,\n\tbiteModeType: FeralDruid_Rotation_BiteModeType.Emperical,\n\tbiteTime: 4.0,\n\tberserkBiteThresh: 25.0,\n\tberserkFfThresh: 15.0,\n\tpowerbear: false,\n\tminRoarOffset: 12.0,\n\tripLeeway: 3.0,\n\tmaintainFaerieFire: true,\n\thotUptime: 0.0,\n\tsnekWeave: false,\n\tflowerWeave: false,\n\traidTargets: 30,\n\tmaxFfDelay: 0.7,\n});\n\nexport const DefaultOptions = FeralDruidOptions.create({\n\tlatencyMs: 100,\n\tprepopOoc: true,\n\tassumeBleedActive: true,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n\tdefaultPotion: Potions.PotionOfSpeed,\n});\n\nexport const PreRaid_PRESET = {\n\tname: 'PreRaid',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 42550,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40678\n\t\t},\n\t\t{\n\t\t\t\"id\": 37139,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37840,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 37219,\n\t\t\t\"enchant\": 3832\n\t\t},\n\t\t{\n\t\t\t\"id\": 44203,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37409,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40694,\n\t\t\t\"gems\": [\n\t\t\t\t49110,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 37644,\n\t\t\t\"enchant\": 3823\n\t\t},\n\t\t{\n\t\t\t\"id\": 44297,\n\t\t\t\"enchant\": 3606\n\t\t},\n\t\t{\n\t\t\t\"id\": 37642\n\t\t},\n\t\t{\n\t\t\t\"id\": 37624\n\t\t},\n\t\t{\n\t\t\t\"id\": 40684\n\t\t},\n\t\t{\n\t\t\t\"id\": 37166\n\t\t},\n\t\t{\n\t\t\t\"id\": 37883,\n\t\t\t\"enchant\": 3827\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 40713\n\t\t}\n  ]}`),\n};\n\nexport const P1_PRESET = {\n\tname: 'P1 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 40473,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44664,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40494,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40403,\n\t\t\t\"enchant\": 3605\n\t\t},\n\t\t{\n\t\t\t\"id\": 40539,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 39765,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40541,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t0\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40205,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 44011,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t49110\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40243,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t40014\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 40474\n\t\t},\n\t\t{\n\t\t\t\"id\": 40717\n\t\t},\n\t\t{\n\t\t\t\"id\": 42987\n\t\t},\n\t\t{\n\t\t\t\"id\": 40256\n\t\t},\n\t\t{\n\t\t\t\"id\": 40388,\n\t\t\t\"enchant\": 3789\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 39757\n\t\t}\n\t]}`),\n};\n\n\nexport const P2_PRESET = {\n\tname: 'P2 Preset',\n\ttooltip: Tooltips.BASIC_BIS_DISCLAIMER,\n\tgear: EquipmentSpec.fromJsonString(`{\"items\": [\n\t\t{\n\t\t\t\"id\": 46161,\n\t\t\t\"enchant\": 3817,\n\t\t\t\"gems\": [\n\t\t\t\t41398,\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45517,\n\t\t\t\"gems\": [\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45245,\n\t\t\t\"enchant\": 3808,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46032,\n\t\t\t\"enchant\": 3605,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t40058\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45473,\n\t\t\t\"enchant\": 3832,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t40002,\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45869,\n\t\t\t\"enchant\": 3845,\n\t\t\t\"gems\": [\n\t\t\t\t40037\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46158,\n\t\t\t\"enchant\": 3604,\n\t\t\t\"gems\": [\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46095,\n\t\t\t\"gems\": [\n\t\t\t\t40002,\n\t\t\t\t40002,\n\t\t\t\t40002\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45536,\n\t\t\t\"enchant\": 3823,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45564,\n\t\t\t\"enchant\": 3606,\n\t\t\t\"gems\": [\n\t\t\t\t39996,\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 46048,\n\t\t\t\"gems\": [\n\t\t\t\t45862\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45608,\n\t\t\t\"gems\": [\n\t\t\t\t39996\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": 45931\n\t\t},\n\t\t{\n\t\t\t\"id\": 46038\n\t\t},\n\t\t{\n\t\t\t\"id\": 45613,\n\t\t\t\"enchant\": 3789,\n\t\t\t\"gems\": [\n\t\t\t\t40037,\n\t\t\t\t42702\n\t\t\t]\n\t\t},\n\t\t{},\n\t\t{\n\t\t\t\"id\": 40713\n\t\t}\n\t]}`),\n};\n","import { RaidBuffs } from '../core/proto/common.js';\nimport { PartyBuffs } from '../core/proto/common.js';\nimport { IndividualBuffs } from '../core/proto/common.js';\nimport { Debuffs } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { Stat, PseudoStat } from '../core/proto/common.js';\nimport { TristateEffect } from '../core/proto/common.js'\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI } from '../core/individual_sim_ui.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Tooltips from '../core/constants/tooltips.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nexport class FeralDruidSimUI extends IndividualSimUI<Spec.SpecFeralDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecFeralDruid>) {\n\t\tsuper(parentElem, player, {\n\t\t\tcssClass: 'feral-druid-sim-ui',\n\t\t\tcssScheme: 'druid',\n\t\t\t// List any known bugs / issues here and they'll be shown on the site.\n\t\t\tknownIssues: [\n\t\t\t],\n\t\t\twarnings: [\n\t\t\t],\n\n\t\t\t// All stats for which EP should be calculated.\n\t\t\tepStats: [\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t],\n\t\t\tepPseudoStats: [\n\t\t\t\tPseudoStat.PseudoStatMainHandDps,\n\t\t\t],\n\t\t\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\t\t\tepReferenceStat: Stat.StatAttackPower,\n\t\t\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\t\t\tdisplayStats: [\n\t\t\t\tStat.StatHealth,\n\t\t\t\tStat.StatStrength,\n\t\t\t\tStat.StatAgility,\n\t\t\t\tStat.StatAttackPower,\n\t\t\t\tStat.StatMeleeHit,\n\t\t\t\tStat.StatMeleeCrit,\n\t\t\t\tStat.StatMeleeHaste,\n\t\t\t\tStat.StatArmorPenetration,\n\t\t\t\tStat.StatExpertise,\n\t\t\t\tStat.StatMana,\n\t\t\t],\n\n\t\t\tdefaults: {\n\t\t\t\t// Default equipped gear.\n\t\t\t\tgear: Presets.P2_PRESET.gear,\n\t\t\t\t// Default EP weights for sorting gear in the gear picker.\n\t\t\t\tepWeights: Stats.fromMap({\n\t\t\t\t\t[Stat.StatStrength]: 2.40,\n\t\t\t\t\t[Stat.StatAgility]: 2.39,\n\t\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t\t[Stat.StatMeleeHit]: 2.51,\n\t\t\t\t\t[Stat.StatMeleeCrit]: 2.23,\n\t\t\t\t\t[Stat.StatMeleeHaste]: 1.83,\n\t\t\t\t\t[Stat.StatArmorPenetration]: 2.08,\n\t\t\t\t\t[Stat.StatExpertise]: 2.44,\n\t\t\t\t}, {\n\t\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 16.5,\n\t\t\t\t}),\n\t\t\t\t// Default consumes settings.\n\t\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\t\t// Default rotation settings.\n\t\t\t\trotation: Presets.DefaultRotation,\n\t\t\t\t// Default talents.\n\t\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\t\t// Default spec-specific settings.\n\t\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\t\t// Default raid/party buffs settings.\n\t\t\t\traidBuffs: RaidBuffs.create({\n\t\t\t\t\tarcaneBrilliance: true,\n\t\t\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbloodlust: true,\n\t\t\t\t\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\n\t\t\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tbattleShout: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tunleashedRage: true,\n\t\t\t\t\ticyTalons: true,\n\t\t\t\t\tswiftRetribution: true,\n\t\t\t\t\tsanctifiedRetribution: true,\n\t\t\t\t}),\n\t\t\t\tpartyBuffs: PartyBuffs.create({\n\t\t\t\t}),\n\t\t\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\t\t\tblessingOfKings: true,\n\t\t\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\t\t}),\n\t\t\t\tdebuffs: Debuffs.create({\n\t\t\t\t\tjudgementOfWisdom: true,\n\t\t\t\t\tbloodFrenzy: true,\n\t\t\t\t\tgiftOfArthas: true,\n\t\t\t\t\texposeArmor: true,\n\t\t\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\t\t\tsunderArmor: true,\n\t\t\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\t\t\theartOfTheCrusader: true,\n\t\t\t\t}),\n\t\t\t},\n\n\t\t\t// IconInputs to include in the 'Player' section on the settings tab.\n\t\t\tplayerIconInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Rotation' section on the settings tab.\n\t\t\trotationInputs: DruidInputs.FeralDruidRotationConfig,\n\t\t\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\t\t\tincludeBuffDebuffInputs: [\n\t\t\t\tIconInputs.IntellectBuff,\n\t\t\t\tIconInputs.MP5Buff,\n\t\t\t\tIconInputs.JudgementOfWisdom,\n\t\t\t],\n\t\t\texcludeBuffDebuffInputs: [\n\t\t\t],\n\t\t\t// Inputs to include in the 'Other' section on the settings tab.\n\t\t\totherInputs: {\n\t\t\t\tinputs: [\n\t\t\t\t\tDruidInputs.LatencyMs,\n\t\t\t\t\tDruidInputs.PrepopOoc,\n\t\t\t\t\tDruidInputs.PrepopBerserk,\n\t\t\t\t\tDruidInputs.AssumeBleedActive,\n\t\t\t\t\tOtherInputs.TankAssignment,\n\t\t\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\t\t],\n\t\t\t},\n\t\t\tencounterPicker: {\n\t\t\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\t\t\tshowExecuteProportion: false,\n\t\t\t},\n\n\t\t\tpresets: {\n\t\t\t\t// Preset talents that the user can quickly select.\n\t\t\t\ttalents: [\n\t\t\t\t\tPresets.StandardTalents,\n\t\t\t\t],\n\t\t\t\t// Preset gear configurations that the user can quickly select.\n\t\t\t\tgear: [\n\t\t\t\t\tPresets.PreRaid_PRESET,\n\t\t\t\t\tPresets.P1_PRESET,\n\t\t\t\t\tPresets.P2_PRESET\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n}\n"],"names":["InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","targetIndex","NO_TARGET","setValue","eventID","newValue","newOptions","RaidTarget","create","setSpecOptions","LatencyMs","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","PrepopOoc","InputHelpers.makeSpecOptionsBooleanInput","showWhen","getTalents","omenOfClarity","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","PrepopBerserk","berserk","AssumeBleedActive","ShouldShowAdvParamST","rot","getRotation","manualParams","rotationType","AplType","SingleTarget","ShouldShowAdvParamAoe","Aoe","FeralDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","float","positive","useBite","biteModeType","BiteModeType","Emperical","flowerWeave","percent","Analytical","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfRip","major2","GlyphOfSavageRoar","major3","GlyphOfShred","minor1","DruidMinorGlyph","GlyphOfDash","minor2","GlyphOfTheWild","minor3","GlyphOfUnburdenedRebirth","DefaultRotation","FeralDruidRotation","FeralDruid_Rotation_AplType","bearWeaveType","FeralDruid_Rotation_BearweaveType","None","minCombosForRip","minCombosForBite","useRake","mangleSpam","FeralDruid_Rotation_BiteModeType","biteTime","berserkBiteThresh","berserkFfThresh","powerbear","minRoarOffset","ripLeeway","maintainFaerieFire","hotUptime","snekWeave","raidTargets","maxFfDelay","DefaultOptions","FeralDruidOptions","latencyMs","prepopOoc","assumeBleedActive","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","PreRaid_PRESET","tooltip","Tooltips.BASIC_BIS_DISCLAIMER","gear","EquipmentSpec","fromJsonString","P1_PRESET","P2_PRESET","FeralDruidSimUI","IndividualSimUI","constructor","parentElem","super","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatHealth","StatMana","defaults","Presets.P2_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","arcaneBrilliance","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","manaSpringTotem","TristateEffectRegular","strengthOfEarthTotem","battleShout","unleashedRage","icyTalons","swiftRetribution","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","judgementOfWisdom","bloodFrenzy","giftOfArthas","exposeArmor","faerieFire","sunderArmor","curseOfWeakness","heartOfTheCrusader","playerIconInputs","rotationInputs","DruidInputs.FeralDruidRotationConfig","includeBuffDebuffInputs","IconInputs.IntellectBuff","IconInputs.MP5Buff","IconInputs.JudgementOfWisdom","excludeBuffDebuffInputs","otherInputs","DruidInputs.LatencyMs","DruidInputs.PrepopOoc","DruidInputs.PrepopBerserk","DruidInputs.AssumeBleedActive","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.PreRaid_PRESET","Presets.P1_PRESET"],"mappings":"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"}