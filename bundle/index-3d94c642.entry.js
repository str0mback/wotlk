import{T as e}from"./index-fa3065da.chunk.js";import{S as t,aJ as a,bi as s,dq as r,x as n,aS as i,C as l,bA as o,T as c,af as d,ao as p,dr as m,aE as h,z as u,Q as g,a1 as f,ah as y,ac as S,bO as I,ds as b,dt as P,A as D,cG as k,cF as E,du as C,dv as R,c6 as w,dw as v,d5 as T,c$ as U,cE as A,dx as O,dj as H,cH as F,da as W,s as B,aX as x,dy as M,at as L,dz as N,I as G,as as $,ab as j,dA as V,_ as q,dB as z,aW as J,dC as K,c4 as _,dD as X,c3 as Q,dE as Z,a2 as Y,bB as ee,dF as te,E as ae,an as se,bj as re,bk as ne,dG as ie,cb as le,cd as oe,b2 as ce}from"./detailed_results-ccec58a3.chunk.js";import{a6 as de,a7 as pe,P as me,a8 as he,a9 as ue,aa as ge,x as fe,ab as ye,C as Se,ac as Ie,ad as be,z as Pe,ae as De,af as ke,ag as Ee,ah as Ce,ai as Re,S as we,aj as ve,ak as Te}from"./individual_sim_ui-7a1d617c.chunk.js";import{T as Ue,D as Ae,B as Oe,a as He,b as Fe,P as We,c as Be}from"./sim-0d682e2e.chunk.js";import{D as xe,a as Me,B as Le,b as Ne,c as Ge,P as $e,d as je,e as Ve,F as qe,f as ze,g as Je,h as Ke,O as _e,i as Xe,U as Qe,j as Ze,k as Ye,l as et}from"./sim-f2f16120.chunk.js";import{B as tt,D as at,P as st,a as rt,b as nt,O as it,c as lt,d as ot}from"./sim-65a34de7.chunk.js";import{F as ct,D as dt,S as pt,a as mt,b as ht,P as ut,c as gt}from"./sim-abc9b500.chunk.js";import{F as ft,D as yt,S as St,a as It,b as bt,P as Pt,c as Dt}from"./sim-b80aedd1.chunk.js";import{R as kt,D as Et,C as Ct,a as Rt,b as wt,P as vt,c as Tt}from"./sim-a961ab3e.chunk.js";import{E as Ut,D as At,S as Ot,a as Ht,b as Ft,P as Wt,c as Bt}from"./sim-da856ddf.chunk.js";import{E as xt,D as Mt,S as Lt,a as Nt,b as Gt,P as $t,c as jt}from"./sim-426019cd.chunk.js";import{R as Vt,D as qt,a as zt,b as Jt,c as Kt,P as _t,d as Xt}from"./sim-743548b2.chunk.js";import{H as Qt,D as Zt,B as Yt,a as ea,b as ta,M as aa,c as sa,d as ra,e as na,S as ia,f as la,g as oa}from"./sim-7ad68802.chunk.js";import{M as ca,D as da,A as pa,a as ma,b as ha,O as ua,c as ga,d as fa,e as ya,F as Sa,f as Ia,g as ba,h as Pa,i as Da,j as ka,k as Ea,l as Ca,m as Ra}from"./sim-91036997.chunk.js";import{R as wa,D as va,A as Ta,a as Ua,b as Aa,P as Oa,c as Ha,C as Fa,d as Wa,e as Ba}from"./sim-7e694646.chunk.js";import{H as xa,D as Ma,S as La,a as Na,b as Ga,P as $a,c as ja}from"./sim-dce469dc.chunk.js";import{P as Va,D as qa,G as za,a as Ja,b as Ka,c as _a,d as Xa}from"./sim-4780e1d3.chunk.js";import{R as Qa,D as Za,A as Ya,a as es,b as ts,P as as,c as ss,d as rs,e as ns,f as is}from"./sim-98956d0f.chunk.js";import{H as ls,D as os,a as cs,b as ds,c as ps,d as ms,e as hs,f as us,g as gs,h as fs,i as ys}from"./sim-a48ec11d.chunk.js";import{S as Ss,D as Is,a as bs,b as Ps,c as Ds,P as ks,d as Es}from"./sim-6a4ec81a.chunk.js";import{S as Cs,D as Rs,a as ws,b as vs,c as Ts,P as Us}from"./sim-08329645.chunk.js";import{W as As,A as Os,a as Hs,D as Fs,b as Ws,P as Bs,c as xs,d as Ms,F as Ls,e as Ns,f as Gs}from"./sim-f54a0b78.chunk.js";import{P as $s,D as js,S as Vs,a as qs,b as zs,c as Js,d as Ks}from"./sim-14a3713c.chunk.js";import{W as _s,A as Xs,a as Qs,b as Zs,D as Ys,P as er,c as tr,O as ar,d as sr,e as rr,f as nr,g as ir,h as lr,i as or,j as cr,k as dr}from"./sim-f5021cc1.chunk.js";import"./totem_inputs-92fc5250.chunk.js";const pr={[t.SpecTankDeathknight]:(e,t)=>new Ue(e,t),[t.SpecDeathknight]:(e,t)=>new xe(e,t),[t.SpecBalanceDruid]:(e,t)=>new tt(e,t),[t.SpecFeralDruid]:(e,t)=>new ct(e,t),[t.SpecFeralTankDruid]:(e,t)=>new ft(e,t),[t.SpecRestorationDruid]:(e,t)=>new kt(e,t),[t.SpecElementalShaman]:(e,t)=>new Ut(e,t),[t.SpecEnhancementShaman]:(e,t)=>new xt(e,t),[t.SpecRestorationShaman]:(e,t)=>new Vt(e,t),[t.SpecHunter]:(e,t)=>new Qt(e,t),[t.SpecMage]:(e,t)=>new ca(e,t),[t.SpecRogue]:(e,t)=>new wa(e,t),[t.SpecHolyPaladin]:(e,t)=>new xa(e,t),[t.SpecProtectionPaladin]:(e,t)=>new Va(e,t),[t.SpecRetributionPaladin]:(e,t)=>new Qa(e,t),[t.SpecHealingPriest]:(e,t)=>new ls(e,t),[t.SpecShadowPriest]:(e,t)=>new Ss(e,t),[t.SpecSmitePriest]:(e,t)=>new Cs(e,t),[t.SpecWarrior]:(e,t)=>new As(e,t),[t.SpecProtectionWarrior]:(e,t)=>new $s(e,t),[t.SpecWarlock]:(e,t)=>new _s(e,t)},mr=[{spec:t.SpecTankDeathknight,rotation:Ae,talents:Oe.data,specOptions:He,consumes:Fe,defaultName:"Blood Tank",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:We.gear,2:Be.gear},[a.Horde]:{1:We.gear,2:Be.gear}},tooltip:"Blood Tank Death Knight",iconUrl:r(n.ClassDeathknight,0)},{spec:t.SpecDeathknight,rotation:Me,talents:Le.data,specOptions:Ne,consumes:Ge,defaultName:"Blood DPS",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:$e.gear,2:je.gear},[a.Horde]:{1:$e.gear,2:je.gear}},tooltip:"Blood DPS Death Knight",iconUrl:r(n.ClassDeathknight,3)},{spec:t.SpecDeathknight,rotation:Ve,talents:qe.data,specOptions:ze,consumes:Ge,defaultName:"Frost",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Je.gear,2:Ke.gear},[a.Horde]:{1:Je.gear,2:Ke.gear}},otherDefaults:_e,tooltip:"Frost Death Knight",iconUrl:r(n.ClassDeathknight,1)},{spec:t.SpecDeathknight,rotation:Xe,talents:Qe.data,specOptions:Ze,consumes:Ge,defaultName:"Unholy",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Ye.gear,2:et.gear},[a.Horde]:{1:Ye.gear,2:et.gear}},otherDefaults:_e,tooltip:"Dual-Wield Unholy DK",iconUrl:r(n.ClassDeathknight,2)},{spec:t.SpecBalanceDruid,rotation:at,talents:st.data,specOptions:rt,consumes:nt,otherDefaults:it,defaultName:"Balance",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:lt.gear,2:ot.gear},[a.Horde]:{1:lt.gear,2:ot.gear}},tooltip:i[t.SpecBalanceDruid],iconUrl:r(n.ClassDruid,0)},{spec:t.SpecFeralDruid,rotation:dt,talents:pt.data,specOptions:mt,consumes:ht,defaultName:"Cat",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ut.gear,2:gt.gear},[a.Horde]:{1:ut.gear,2:gt.gear}},tooltip:i[t.SpecFeralDruid],iconUrl:r(n.ClassDruid,3)},{spec:t.SpecFeralTankDruid,rotation:yt,talents:St.data,specOptions:It,consumes:bt,defaultName:"Bear",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Pt.gear,2:Dt.gear},[a.Horde]:{1:Pt.gear,2:Dt.gear}},tooltip:i[t.SpecFeralTankDruid],iconUrl:r(n.ClassDruid,1)},{spec:t.SpecRestorationDruid,rotation:Et,talents:Ct.data,specOptions:Rt,consumes:wt,defaultName:"Restoration",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceTauren},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:vt.gear,2:Tt.gear},[a.Horde]:{1:vt.gear,2:Tt.gear}},tooltip:i[t.SpecRestorationDruid],iconUrl:r(n.ClassDruid,2)},{spec:t.SpecHunter,rotation:Zt,talents:Yt.data,specOptions:ea,consumes:ta,defaultName:"Beast Mastery",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:aa.gear,2:sa.gear},[a.Horde]:{1:aa.gear,2:sa.gear}},tooltip:"Beast Mastery Hunter",iconUrl:r(n.ClassHunter,0)},{spec:t.SpecHunter,rotation:Zt,talents:ra.data,specOptions:na,consumes:ta,defaultName:"Marksmanship",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:aa.gear,2:sa.gear},[a.Horde]:{1:aa.gear,2:sa.gear}},tooltip:"Marksmanship Hunter",iconUrl:r(n.ClassHunter,1)},{spec:t.SpecHunter,rotation:Zt,talents:ia.data,specOptions:na,consumes:ta,defaultName:"Survival",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceNightElf,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:la.gear,2:oa.gear},[a.Horde]:{1:la.gear,2:oa.gear}},tooltip:"Survival Hunter",iconUrl:r(n.ClassHunter,2)},{spec:t.SpecMage,rotation:da,talents:pa.data,specOptions:ma,consumes:ha,otherDefaults:ua,defaultName:"Arcane",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceGnome,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ga.gear,2:fa.gear},[a.Horde]:{1:ga.gear,2:fa.gear}},tooltip:"Arcane Mage",iconUrl:r(n.ClassMage,0)},{spec:t.SpecMage,rotation:ya,talents:Sa.data,specOptions:Ia,consumes:ba,otherDefaults:ua,defaultName:"TTW Fire",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceGnome,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Pa.gear,2:Da.gear},[a.Horde]:{1:Pa.gear,2:Da.gear}},tooltip:"TTW Fire Mage",iconUrl:r(n.ClassMage,1)},{spec:t.SpecMage,rotation:ka,talents:Ea.data,specOptions:Ca,consumes:ba,otherDefaults:ua,defaultName:"FFB Fire",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceGnome,[a.Horde]:s.RaceTroll},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Pa.gear,2:Ra.gear},[a.Horde]:{1:Pa.gear,2:Ra.gear}},tooltip:"FFB Fire Mage",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_mage_frostfirebolt.jpg"},{spec:t.SpecRogue,rotation:va,talents:Ta.data,specOptions:Ua,consumes:Aa,defaultName:"Assassination",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Oa.gear,2:Ha.gear},[a.Horde]:{1:Oa.gear,2:Ha.gear}},tooltip:"Assassination Rogue",iconUrl:r(n.ClassRogue,0)},{spec:t.SpecRogue,rotation:va,talents:Fa.data,specOptions:Ua,consumes:Aa,defaultName:"Combat",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Wa.gear,2:Ba.gear},[a.Horde]:{1:Wa.gear,2:Ba.gear}},tooltip:"Combat Rogue",iconUrl:r(n.ClassRogue,1)},{spec:t.SpecElementalShaman,rotation:At,talents:Ot.data,specOptions:Ht,consumes:Ft,defaultName:"Elemental",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDraenei,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Wt.gear,2:Bt.gear},[a.Horde]:{1:Wt.gear,2:Bt.gear}},tooltip:i[t.SpecElementalShaman],iconUrl:r(n.ClassShaman,0)},{spec:t.SpecEnhancementShaman,rotation:Mt,talents:Lt.data,specOptions:Nt,consumes:Gt,defaultName:"Enhancement",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDraenei,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:$t.gear,2:jt.gear},[a.Horde]:{1:$t.gear,2:jt.gear}},tooltip:i[t.SpecEnhancementShaman],iconUrl:r(n.ClassShaman,1)},{spec:t.SpecRestorationShaman,rotation:qt,talents:zt.data,specOptions:Jt,consumes:Kt,defaultName:"Restoration",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDraenei,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:_t.gear,2:Xt.gear},[a.Horde]:{1:_t.gear,2:Xt.gear}},tooltip:i[t.SpecRestorationShaman],iconUrl:r(n.ClassShaman,2)},{spec:t.SpecHealingPriest,rotation:os,talents:cs.data,specOptions:ds,consumes:ps,defaultName:"Discipline",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ms.gear,2:hs.gear},[a.Horde]:{1:ms.gear,2:hs.gear}},tooltip:"Discipline Priest",iconUrl:r(n.ClassPriest,0)},{spec:t.SpecHealingPriest,rotation:us,talents:gs.data,specOptions:ds,consumes:ps,defaultName:"Holy",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:fs.gear,2:ys.gear},[a.Horde]:{1:fs.gear,2:ys.gear}},tooltip:"Holy Priest",iconUrl:r(n.ClassPriest,1)},{spec:t.SpecShadowPriest,rotation:Is,talents:bs.data,specOptions:Ps,consumes:Ds,defaultName:"Shadow",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ks.gear,2:Es.gear},[a.Horde]:{1:ks.gear,2:Es.gear}},tooltip:i[t.SpecShadowPriest],iconUrl:r(n.ClassPriest,2)},{spec:t.SpecSmitePriest,rotation:Rs,talents:ws.data,specOptions:vs,consumes:Ts,defaultName:"Smite",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceDwarf,[a.Horde]:s.RaceUndead},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Us.gear,2:Es.gear},[a.Horde]:{1:Us.gear,2:Es.gear}},tooltip:i[t.SpecSmitePriest],iconUrl:r(n.ClassPriest,3)},{spec:t.SpecWarrior,rotation:Os,talents:Hs.data,specOptions:Fs,consumes:Ws,defaultName:"Arms",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Bs.gear,2:xs.gear},[a.Horde]:{1:Bs.gear,2:xs.gear}},tooltip:"Arms Warrior",iconUrl:r(n.ClassWarrior,0)},{spec:t.SpecWarrior,rotation:Ms,talents:Ls.data,specOptions:Fs,consumes:Ws,defaultName:"Fury",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Ns.gear,2:Gs.gear},[a.Horde]:{1:Ns.gear,2:Gs.gear}},tooltip:"Fury Warrior",iconUrl:r(n.ClassWarrior,1)},{spec:t.SpecProtectionWarrior,rotation:js,talents:Vs.data,specOptions:qs,consumes:zs,defaultName:"Protection",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:Js.gear,2:Ks.gear},[a.Horde]:{1:Js.gear,2:Ks.gear}},tooltip:"Protection Warrior",iconUrl:r(n.ClassWarrior,2)},{spec:t.SpecHolyPaladin,rotation:Ma,talents:La.data,specOptions:Na,consumes:Ga,defaultName:"Holy",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceBloodElf},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:$a.gear,2:ja.gear},[a.Horde]:{1:$a.gear,2:ja.gear}},tooltip:"Holy Paladin",iconUrl:r(n.ClassPaladin,0)},{spec:t.SpecProtectionPaladin,rotation:qa,talents:za.data,specOptions:Ja,consumes:Ka,defaultName:"Protection",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceBloodElf},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:_a.gear,2:Xa.gear},[a.Horde]:{1:_a.gear,2:Xa.gear}},tooltip:"Protection Paladin",iconUrl:r(n.ClassPaladin,1)},{spec:t.SpecRetributionPaladin,rotation:Za,talents:Ya.data,specOptions:es,consumes:ts,defaultName:"Retribution",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceBloodElf},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:as.gear,2:ss.gear,3:rs.gear,4:ns.gear,5:is.gear},[a.Horde]:{1:as.gear,2:ss.gear,3:rs.gear,4:ns.gear,5:is.gear}},tooltip:"Retribution Paladin",iconUrl:r(n.ClassPaladin,2)},{spec:t.SpecWarlock,rotation:Xs,talents:Qs.data,specOptions:Zs,consumes:Ys,defaultName:"Affliction",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:er.gear,2:tr.gear},[a.Horde]:{1:er.gear,2:tr.gear}},otherDefaults:ar,tooltip:"Affliction Warlock",iconUrl:r(n.ClassWarlock,0)},{spec:t.SpecWarlock,rotation:sr,talents:rr.data,specOptions:nr,consumes:Ys,defaultName:"Demonology",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ir.gear,2:lr.gear},[a.Horde]:{1:ir.gear,2:lr.gear}},otherDefaults:ar,tooltip:"Demonology Warlock",iconUrl:r(n.ClassWarlock,1)},{spec:t.SpecWarlock,rotation:or,talents:cr.data,specOptions:dr,consumes:Ys,defaultName:"Destruction",defaultFactionRaces:{[a.Unknown]:s.RaceUnknown,[a.Alliance]:s.RaceHuman,[a.Horde]:s.RaceOrc},defaultGear:{[a.Unknown]:{},[a.Alliance]:{1:ir.gear,2:lr.gear},[a.Horde]:{1:ir.gear,2:lr.gear}},otherDefaults:ar,tooltip:"Destruction Warlock",iconUrl:r(n.ClassWarlock,2)}],hr=[...new Set(mr.map((e=>e.spec)))];class ur extends l{constructor(e,t){super(e,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=t,this.raid=t.sim.raid;const s=document.createElement("div");s.classList.add("raid-controls"),this.rootElem.appendChild(s),this.newPlayerPicker=new Sr(this.rootElem,this),new de(s,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:e=>e.numActivePartiesChangeEmitter,getValue:e=>e.getNumActiveParties(),setValue:(e,t,a)=>{t.setNumActiveParties(e,a)}}),new de(s,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:a.Alliance},{name:"Horde",value:a.Horde}],changedEvent:e=>this.raid.sim.factionChangeEmitter,getValue:e=>this.raid.sim.getFaction(),setValue:(e,t,a)=>{this.raid.sim.setFaction(e,a)}});const r=Math.min(...mr.map((e=>Math.max(...Object.keys(e.defaultGear[a.Alliance]).map((e=>parseInt(e)))))));new de(s,this.newPlayerPicker,{label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(r).keys()].map((e=>{const t=e+1;return{name:"Phase "+t,value:t}})),changedEvent:e=>this.raid.sim.phaseChangeEmitter,getValue:e=>this.raid.sim.getPhase(),setValue:(e,t,a)=>{this.raid.sim.setPhase(e,a)}});const n=document.createElement("div");n.classList.add("parties-container"),this.rootElem.appendChild(n),this.partyPickers=this.raid.getParties().map(((e,t)=>new gr(n,e,t,this)));const i=()=>{this.partyPickers.forEach((e=>{e.index<this.raidSimUI.sim.raid.getNumActiveParties()?e.rootElem.classList.add("active"):e.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(i),i(),this.rootElem.ondragend=e=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/pe)].playerPickers[e%pe]}getPlayerPickers(){return[...new Array(25).keys()].map((e=>this.getPlayerPicker(e)))}setDragPlayer(e,t,a){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=a,-1!=t){this.getPlayerPicker(t).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(-1!=this.currentDragPlayerFromIndex){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1}setDragParty(e){this.currentDragParty=e,e.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class gr extends l{constructor(e,t,a,s){super(e,"party-picker-root"),this.party=t,this.index=a,this.raidPicker=s,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${a+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const r=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(pe).keys()].map((e=>new fr(r,this,e)));const n=this.rootElem.getElementsByClassName("party-results-dps")[0],i=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return n.textContent="",void(i.textContent="");n.textContent=a.toFixed(1),t?o(i,s,a,1):i.textContent=""})),this.rootElem.ondragstart=e=>{e.target==this.rootElem&&(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let l=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(l++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(l--,l<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=e=>{if(!this.raidPicker.currentDragParty)return;e.preventDefault(),l=0,this.rootElem.classList.remove("dragto");const t=c.nextEventID();c.freezeAllAndDo((()=>{const e=this.raidPicker.currentDragParty;for(let a=0;a<pe;a++){const s=e.playerPickers[a],r=this.playerPickers[a],n=s.player,i=r.player;s.setPlayer(t,i,3),r.setPlayer(t,n,3)}})),this.raidPicker.clearDragParty()}}}class fr extends l{constructor(e,t,a){super(e,"player-picker-root"),this.index=a,this.raidIndex=t.index*pe+a,this.player=null,this.partyPicker=t,this.raidPicker=t.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((e=>{const t=this.partyPicker.party.getPlayer(this.index);t!=this.player&&this.setPlayer(e,t,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=a.toFixed(1),t&&o(this.referenceDeltaElem,s,a,1))}));let s=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s--,s<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>e.preventDefault(),this.rootElem.ondrop=e=>{if(this.raidPicker.currentDragParty)return;var t=e.dataTransfer.getData("text/plain");e.preventDefault(),s=0,this.rootElem.classList.remove("dragto");const a=c.nextEventID();c.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==t.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(-1!=this.raidPicker.currentDragPlayerFromIndex){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==e?t.setPlayer(a,this.player,e):2==e&&t.setPlayer(a,null,e)}else if(null==this.raidPicker.currentDragPlayer){const e=atob(t),r=new Uint8Array(e.length);for(let t=0;t<r.length;t++)r[t]=e.charCodeAt(t);const n=d.fromBinary(r);var s=new me(p(n),this.raidPicker.raidSimUI.sim);s.fromProto(a,n),this.raidPicker.currentDragPlayer=s}4==e?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),e):this.setPlayer(a,this.raidPicker.currentDragPlayer,e),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(e,a,s){a!=this.player&&(c.freezeAllAndDo((()=>{this.player=a,a?(this.partyPicker.party.setPlayer(e,this.index,a),1==s&&function(e,a,s){if(y(a.spec)){const t=s.getTanks(),r=t.findIndex((e=>null==s.getPlayerFromRaidTarget(e)));-1==r?t.length<3&&s.setTanks(e,t.concat([a.makeRaidTarget()])):(t[r]=a.makeRaidTarget(),s.setTanks(e,t))}if(a.spec==t.SpecBalanceDruid){const t=a.getSpecOptions();t.innervateTarget=S(a.getRaidIndex()),a.setSpecOptions(e,t)}else if(a.spec==t.SpecSmitePriest){const t=a.getSpecOptions();t.powerInfusionTarget=S(a.getRaidIndex()),a.setSpecOptions(e,t)}else if(a.spec==t.SpecMage){const t=a.getSpecOptions();t.focusMagicTarget=S(a.getRaidIndex()),a.setSpecOptions(e,t)}}(e,a,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(e,this.index,a),this.partyPicker.party.compChangeEmitter.emit(e))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const e=m(this.player.getClass());this.rootElem.className=`player-picker-root player bg-${e}-dampened`,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="false"/>\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${e}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="false"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="false"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(e=>{this.player?.setName(c.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(e=>{this.rootElem.setAttribute("draggable","false"),this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(e=>{this.rootElem.setAttribute("draggable","true"),this.partyPicker.rootElem.setAttribute("draggable","true")}));const t="Unnamed";this.nameElem?.addEventListener("focusout",(e=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=t,this.player?.setName(c.nextEventID(),t))}));const a=(e,t)=>{if(null!=this.player){if(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.player){var a=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...d.toBinary(a))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,t)}else e.preventDefault()},s=this.rootElem.querySelector(".player-edit"),r=this.rootElem.querySelector(".player-copy"),n=this.rootElem.querySelector(".player-delete");this.rootElem.ondragstart=e=>{e.target!=r&&a(e,3)},e.getOrCreateInstance(s),e.getOrCreateInstance(r);const i=e.getOrCreateInstance(n);s.onclick=e=>{new yr(this.player)},r.ondragstart=e=>{e.dataTransfer.setDragImage(this.rootElem,20,20),a(e,4)},n.onclick=e=>{i.hide(),this.setPlayer(c.nextEventID(),null,0)}}}class yr extends he{constructor(e){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1}),this.rootElem.id="playerEditorModal",this.body.insertAdjacentHTML("beforeend",'\n\t\t\t<div class="player-editor within-raid-sim"></div>\n\t\t');const t=this.rootElem.getElementsByClassName("player-editor")[0];pr[e.spec](t,e)}}class Sr extends l{constructor(t,a){super(t,"new-player-picker-root"),this.raidPicker=a,h(n).forEach((t=>{if(t==n.ClassUnknown)return;const a=mr.filter((e=>u[e.spec]==t));if(0==a.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${m(t)}-dampened`),this.rootElem.appendChild(s),a.forEach((t=>{const a=document.createElement("fragment");a.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\t\tdata-bs-title="${t.tooltip}"\n\t\t\t\t\t\tdata-bs-html="true"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${t.iconUrl}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const r=a.children[0];s.appendChild(r),e.getOrCreateInstance(r),r.ondragstart=e=>{const a=c.nextEventID();c.freezeAllAndDo((()=>{const s=new Image;s.src=t.iconUrl,e.dataTransfer.setDragImage(s,30,30),e.dataTransfer.setData("text/plain",""),e.dataTransfer.dropEffect="copy";const r=new me(t.spec,this.raidPicker.raid.sim);r.applySharedDefaults(a),r.setRace(a,t.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setRotation(a,t.rotation),r.setTalentsString(a,t.talents.talentsString),r.setGlyphs(a,t.talents.glyphs||g.create()),r.setSpecOptions(a,t.specOptions),r.setConsumes(a,t.consumes),r.setName(a,t.defaultName),r.setProfession1(a,t.otherDefaults?.profession1||f.Engineering),r.setProfession2(a,t.otherDefaults?.profession2||f.Jewelcrafting),r.setDistanceFromTarget(a,t.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{r.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(t.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(r,-1,1)}))}}))}))}}class Ir extends l{constructor(e,t){super(e,"raid-stats");let a=[];Ur.sections.forEach((e=>{const s=document.createElement("div");s.classList.add("raid-stats-section"),this.rootElem.appendChild(s),s.innerHTML=`\n\t\t\t\t<div class="raid-stats-section-header">\n\t\t\t\t\t<label class="raid-stats-section-label form-label">${e.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class="raid-stats-section-content"></div>\n\t\t\t`;const r=s.getElementsByClassName("raid-stats-section-content")[0];e.categories.forEach((e=>{a.push(new br(r,t,e))}))})),this.categories=a,t.changeEmitter.on((e=>this.categories.forEach((e=>e.update()))))}}class br extends l{constructor(t,a,s){if(super(t,"raid-stats-category-root"),this.raidSimUI=a,this.options=s,this.rootElem.innerHTML=`\n\t\t\t<a href="javascript:void(0)" role="button" class="raid-stats-category">\n\t\t\t\t<span class="raid-stats-category-counter"></span>\n\t\t\t\t<span class="raid-stats-category-label">${s.label}</span>\n\t\t\t</a>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-category-counter"),this.tooltipElem=document.createElement("div"),this.tooltipElem.innerHTML=`\n\t\t\t<label class="raid-stats-category-label">${s.label}</label>\n\t\t`,this.effects=s.effects.map((e=>new Pr(this.tooltipElem,a,e))),1!=s.effects.length||s.effects[0].playerData?.class){const t=this.rootElem.querySelector(".raid-stats-category");t.setAttribute("data-bs-toggle","tooltip"),t.setAttribute("data-bs-placement","right"),t.setAttribute("data-bs-html","true"),e.getOrCreateInstance(t,{customClass:"raid-stats-category-tooltip",title:this.tooltipElem})}}update(){this.effects.forEach((e=>e.update()));const e=B(this.effects.map((e=>e.count)));this.counterElem.textContent=String(e);const t=this.rootElem.querySelector(".raid-stats-category");0==e?t?.classList.remove("active"):t?.classList.add("active")}}class Pr extends l{constructor(e,t,a){if(super(e,"raid-stats-effect"),this.raidSimUI=t,this.options=a,this.curPlayers=[],this.count=0,this.rootElem.innerHTML=`\n\t\t\t<span class="raid-stats-effect-counter"></span>\n\t\t\t<img class="raid-stats-effect-icon"></img>\n\t\t\t<span class="raid-stats-effect-label">${a.label}</span>\n\t\t`,this.counterElem=this.rootElem.querySelector(".raid-stats-effect-counter"),this.options.playerData?.class){const e=this.rootElem.querySelector(".raid-stats-effect-label"),t=x(this.options.playerData.class);e.classList.add(t)}const s=this.rootElem.querySelector(".raid-stats-effect-icon");a.actionId?a.actionId.fill().then((e=>s.src=e.iconUrl)):s.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((e=>this.options.playerData.condition(e))));const e=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(e?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function Dr(e,t){return t?!e:e}function kr(e,t){return{class:e,condition:a=>a.isClass(e)&&(!t||t(a))}}function Er(e,t,a,s){return{class:e,condition:r=>r.isClass(e)&&Dr(Boolean(r.getTalents()[t]),a)&&(!s||s(r))}}function Cr(e,t,a){return Er(e,t,!1,a)}function Rr(e,t,a){return Er(e,t,!0,a)}function wr(e,t,a,s){return{class:u[e],condition:r=>r.isSpec(e)&&Dr(Boolean(r.getTalents()[t]),a)&&(!s||s(r))}}function vr(e,t,a){return wr(e,t,!1,a)}function Tr(e){return t=>Boolean(t.getBuffs()[e])}const Ur={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:e=>y(e.spec)}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:e=>I(e.spec)}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:e=>b(e.spec)}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:e=>P(e.spec)}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:D.fromSpellId(2825),playerData:kr(n.ClassShaman,(e=>e.getSpecOptions().bloodlust))}]},{label:"Stats",effects:[{label:"Improved Gift of the Wild",actionId:D.fromSpellId(17051),playerData:Cr(n.ClassDruid,"improvedMarkOfTheWild")},{label:"Gift of the Wild",actionId:D.fromSpellId(48470),playerData:Rr(n.ClassDruid,"improvedMarkOfTheWild")},{label:"Drums of the Wild",actionId:D.fromItemId(49634),raidData:Tr("drumsOfTheWild")}]},{label:"Stats %",effects:[{label:"Blessing of Kings",actionId:D.fromSpellId(25898),playerData:kr(n.ClassPaladin)},{label:"Drums of Forgotten Kings",actionId:D.fromItemId(49633),raidData:Tr("drumsOfForgottenKings")},{label:"Blessing of Sanctuary",actionId:D.fromSpellId(25899),playerData:kr(n.ClassPaladin)}]},{label:"Armor",effects:[{label:"Improved Devotion Aura",actionId:D.fromSpellId(20140),playerData:Cr(n.ClassPaladin,"improvedDevotionAura",(e=>e.getSpecOptions().aura==U.DevotionAura))},{label:"Devotion Aura",actionId:D.fromSpellId(48942),playerData:Rr(n.ClassPaladin,"improvedDevotionAura",(e=>e.getSpecOptions().aura==U.DevotionAura))},{label:"Improved Stoneskin Totem",actionId:D.fromSpellId(16293),playerData:Cr(n.ClassShaman,"guardianTotems",(e=>e.getRotation().totems?.earth==A.StoneskinTotem))},{label:"Stoneskin Totem",actionId:D.fromSpellId(58753),playerData:Rr(n.ClassShaman,"guardianTotems",(e=>e.getRotation().totems?.earth==A.StoneskinTotem))},{label:"Scroll of Protection",actionId:D.fromItemId(43468),raidData:Tr("scrollOfProtection")}]},{label:"Stamina",effects:[{label:"Improved Power Word Fortitude",actionId:D.fromSpellId(14767),playerData:Cr(n.ClassPriest,"improvedPowerWordFortitude")},{label:"Power Word Fortitude",actionId:D.fromSpellId(48161),playerData:Rr(n.ClassPriest,"improvedPowerWordFortitude")},{label:"Scroll of Stamina",actionId:D.fromItemId(37094),raidData:Tr("scrollOfStamina")}]},{label:"Str + Agi",effects:[{label:"Improved Strength of Earth Totem",actionId:D.fromSpellId(52456),playerData:Cr(n.ClassShaman,"enhancingTotems",(e=>e.getRotation().totems?.earth==A.StrengthOfEarthTotem))},{label:"Strength of Earth Totem",actionId:D.fromSpellId(58643),playerData:Rr(n.ClassShaman,"enhancingTotems",(e=>e.getRotation().totems?.earth==A.StrengthOfEarthTotem))},{label:"Horn of Winter",actionId:D.fromSpellId(57623),playerData:kr(n.ClassDeathknight)},{label:"Scroll of Strength",actionId:D.fromItemId(43466),raidData:Tr("scrollOfStrength")},{label:"Scroll of Agility",actionId:D.fromItemId(43464),raidData:Tr("scrollOfAgility")}]},{label:"Intellect",effects:[{label:"Arcane Brilliance",actionId:D.fromSpellId(43002),playerData:kr(n.ClassMage)},{label:"Improved Fel Intelligence",actionId:D.fromSpellId(54038),playerData:Cr(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Fel Intelligence",actionId:D.fromSpellId(57567),playerData:Rr(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Scroll of Intellect",actionId:D.fromItemId(37092),raidData:Tr("scrollOfIntellect")}]},{label:"Spirit",effects:[{label:"Divine Spirit",actionId:D.fromSpellId(48073),playerData:kr(n.ClassPriest)},{label:"Improved Fel Intelligence",actionId:D.fromSpellId(54038),playerData:Cr(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Fel Intelligence",actionId:D.fromSpellId(57567),playerData:Rr(n.ClassWarlock,"improvedFelhunter",(e=>e.getSpecOptions().summon==O.Felhunter))},{label:"Scroll of Spirit",actionId:D.fromItemId(37098),raidData:Tr("scrollOfSpirit")}]},{label:"Atk Pwr",effects:[{label:"Improved Blessing of Might",actionId:D.fromSpellId(20045),playerData:kr(n.ClassPaladin)},{label:"Blessing of Might",actionId:D.fromSpellId(48934),playerData:kr(n.ClassPaladin)},{label:"Improved Battle Shout",actionId:D.fromSpellId(12861),playerData:Cr(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutBattle))},{label:"Battle Shout",actionId:D.fromSpellId(47436),playerData:Rr(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutBattle))}]},{label:"Atk Pwr %",effects:[{label:"Abomination's Might",actionId:D.fromSpellId(53138),playerData:Cr(n.ClassDeathknight,"abominationsMight")},{label:"Unleashed Rage",actionId:D.fromSpellId(30809),playerData:Cr(n.ClassShaman,"unleashedRage")},{label:"Trueshot Aura",actionId:D.fromSpellId(19506),playerData:Cr(n.ClassHunter,"trueshotAura")}]},{label:"Damage %",effects:[{label:"Sanctified Retribution",actionId:D.fromSpellId(31869),playerData:Cr(n.ClassPaladin,"sanctifiedRetribution")},{label:"Arcane Empowerment",actionId:D.fromSpellId(31583),playerData:Cr(n.ClassMage,"arcaneEmpowerment")},{label:"Ferocious Inspiration",actionId:D.fromSpellId(34460),playerData:Cr(n.ClassHunter,"ferociousInspiration")}]},{label:"Mit %",effects:[{label:"Renewed Hope",actionId:D.fromSpellId(57472),playerData:Cr(n.ClassPriest,"renewedHope")},{label:"Blessing Of Sanctuary",actionId:D.fromSpellId(25899),playerData:kr(n.ClassPaladin)},{label:"Vigilance",actionId:D.fromSpellId(50720),playerData:Cr(n.ClassWarrior,"vigilance")}]},{label:"Haste %",effects:[{label:"Swift Retribution",actionId:D.fromSpellId(53648),playerData:Cr(n.ClassPaladin,"swiftRetribution")},{label:"Improved Moonkin Form",actionId:D.fromSpellId(48396),playerData:Cr(n.ClassDruid,"improvedMoonkinForm")}]},{label:"MP5",effects:[{label:"Improved Blessing of Wisdom",actionId:D.fromSpellId(20245),playerData:Cr(n.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Blessing of Wisdom",actionId:D.fromSpellId(48938),playerData:Rr(n.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Improved Mana Spring Totem",actionId:D.fromSpellId(16206),playerData:Cr(n.ClassShaman,"restorativeTotems",(e=>e.getRotation().totems?.water==F.ManaSpringTotem))},{label:"Mana Spring Totem",actionId:D.fromSpellId(58774),playerData:Rr(n.ClassShaman,"restorativeTotems",(e=>e.getRotation().totems?.water==F.ManaSpringTotem))}]},{label:"Melee Crit",effects:[{label:"Leader of the Pack",actionId:D.fromSpellId(17007),playerData:Cr(n.ClassDruid,"leaderOfThePack")},{label:"Rampage",actionId:D.fromSpellId(29801),playerData:Cr(n.ClassWarrior,"rampage")}]},{label:"Melee Haste",effects:[{label:"Improved Icy Talons",actionId:D.fromSpellId(55610),playerData:Cr(n.ClassDeathknight,"improvedIcyTalons")},{label:"Improved Windfury Totem",actionId:D.fromSpellId(29193),playerData:Cr(n.ClassShaman,"improvedWindfuryTotem",(e=>e.getRotation().totems?.air==E.WindfuryTotem))},{label:"Windfury Totem",actionId:D.fromSpellId(65990),playerData:Rr(n.ClassShaman,"improvedWindfuryTotem",(e=>e.getRotation().totems?.air==E.WindfuryTotem))}]},{label:"Spell Power",effects:[{label:"Demonic Pact",actionId:D.fromSpellId(47240),playerData:Cr(n.ClassWarlock,"demonicPact")},{label:"Totem of Wrath",actionId:D.fromSpellId(57722),playerData:Cr(n.ClassShaman,"totemOfWrath",(e=>e.getRotation().totems?.fire==k.TotemOfWrath))},{label:"Flametongue Totem",actionId:D.fromSpellId(58656),playerData:kr(n.ClassShaman,(e=>e.getRotation().totems?.fire==k.FlametongueTotem))}]},{label:"Spell Crit",effects:[{label:"Moonkin Form",actionId:D.fromSpellId(24907),playerData:vr(t.SpecBalanceDruid,"moonkinForm")},{label:"Elemental Oath",actionId:D.fromSpellId(51470),playerData:Cr(n.ClassShaman,"elementalOath")}]},{label:"Spell Haste",effects:[{label:"Wrath of Air Totem",actionId:D.fromSpellId(3738),playerData:kr(n.ClassShaman,(e=>e.getRotation().totems?.air==E.WrathOfAirTotem))}]},{label:"Health",effects:[{label:"Improved Commanding Shout",actionId:D.fromSpellId(12861),playerData:Cr(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutCommanding))},{label:"Commanding Shout",actionId:D.fromSpellId(47440),playerData:Rr(n.ClassWarrior,"commandingPresence",(e=>e.getSpecOptions().shout==H.WarriorShoutCommanding))},{label:"Improved Imp",actionId:D.fromSpellId(18696),playerData:Cr(n.ClassWarlock,"improvedImp",(e=>e.getSpecOptions().summon==O.Imp))},{label:"Blood Pact",actionId:D.fromSpellId(47982),playerData:Rr(n.ClassWarlock,"improvedImp",(e=>e.getSpecOptions().summon==O.Imp))}]},{label:"Replenishment",effects:[{label:"Vampiric Touch",actionId:D.fromSpellId(48160),playerData:vr(t.SpecShadowPriest,"vampiricTouch")},{label:"Judgements of the Wise",actionId:D.fromSpellId(31878),playerData:vr(t.SpecRetributionPaladin,"judgementsOfTheWise")},{label:"Hunting Party",actionId:D.fromSpellId(53292),playerData:vr(t.SpecHunter,"huntingParty")},{label:"Improved Soul Leech",actionId:D.fromSpellId(54118),playerData:vr(t.SpecWarlock,"improvedSoulLeech")},{label:"Enduring Winter",actionId:D.fromSpellId(44561),playerData:vr(t.SpecMage,"enduringWinter")}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:D.fromSpellId(29166),playerData:kr(n.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:D.fromSpellId(10060),playerData:Cr(n.ClassPriest,"powerInfusion")}]},{label:"Focus Magic",effects:[{label:"Focus Magic",actionId:D.fromSpellId(54648),playerData:Cr(n.ClassMage,"focusMagic")}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:D.fromSpellId(57933),playerData:kr(n.ClassRogue)}]},{label:"Unholy Frenzy",effects:[{label:"Unholy Frenzy",actionId:D.fromSpellId(49016),playerData:Cr(n.ClassDeathknight,"hysteria")}]},{label:"Pain Suppression",effects:[{label:"Pain Suppression",actionId:D.fromSpellId(33206),playerData:Cr(n.ClassPriest,"painSuppression")}]},{label:"Divine Guardian",effects:[{label:"Divine Guardian",actionId:D.fromSpellId(53530),playerData:Cr(n.ClassPaladin,"divineGuardian")}]}]},{label:"DPS Debuffs",categories:[{label:"Major ArP",effects:[{label:"Sunder Armor",actionId:D.fromSpellId(47467),playerData:kr(n.ClassWarrior,(e=>e.isSpec(t.SpecProtectionWarrior)||e.getRotation().sunderArmor==C.SunderArmorMaintain))},{label:"Expose Armor",actionId:D.fromSpellId(8647),playerData:kr(n.ClassRogue,(e=>e.getRotation().exposeArmorFrequency==R.Maintain))},{label:"Acid Spit",actionId:D.fromSpellId(55754),playerData:kr(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Worm))}]},{label:"Minor ArP",effects:[{label:"Faerie Fire",actionId:D.fromSpellId(770),playerData:kr(n.ClassDruid,(e=>e.spec==t.SpecFeralTankDruid||e.spec!=t.SpecRestorationDruid&&e.getRotation().maintainFaerieFire))},{label:"Curse of Weakness",actionId:D.fromSpellId(50511),playerData:kr(n.ClassWarlock,(e=>e.getRotation().curse==v.Weakness))},{label:"Sting",actionId:D.fromSpellId(56631),playerData:kr(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Wasp))},{label:"Spore Cloud",actionId:D.fromSpellId(53598),playerData:kr(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Bat))}]},{label:"Phys Vuln",effects:[{label:"Blood Frenzy",actionId:D.fromSpellId(29859),playerData:Cr(n.ClassWarrior,"bloodFrenzy")},{label:"Savage Combat",actionId:D.fromSpellId(58413),playerData:Cr(n.ClassRogue,"savageCombat")}]},{label:"Bleed",effects:[{label:"Mangle",actionId:D.fromSpellId(16862),playerData:kr(n.ClassDruid,(e=>[t.SpecFeralDruid,t.SpecFeralTankDruid].includes(e.spec)))},{label:"Trauma",actionId:D.fromSpellId(46855),playerData:Cr(n.ClassWarrior,"trauma")},{label:"Stampede",actionId:D.fromSpellId(57393),playerData:kr(n.ClassHunter,(e=>e.getSpecOptions().petType==w.Rhino))}]},{label:"Crit",effects:[{label:"Totem of Wrath",actionId:D.fromSpellId(30706),playerData:Cr(n.ClassShaman,"totemOfWrath",(e=>e.getRotation().totems?.fire==k.TotemOfWrath))},{label:"Heart of the Crusader",actionId:D.fromSpellId(20337),playerData:Cr(n.ClassPaladin,"heartOfTheCrusader",(e=>[t.SpecRetributionPaladin,t.SpecProtectionPaladin].includes(e.spec)))},{label:"Master Poisoner",actionId:D.fromSpellId(58410),playerData:Cr(n.ClassRogue,"masterPoisoner")}]},{label:"Spell Crit",effects:[{label:"Improved Shadow Bolt",actionId:D.fromSpellId(17803),playerData:Cr(n.ClassWarlock,"improvedShadowBolt")},{label:"Improved Scorch",actionId:D.fromSpellId(12873),playerData:Cr(n.ClassMage,"improvedScorch",(e=>{const t=e.getRotation();return t.type==W.Fire&&t.maintainImprovedScorch}))},{label:"Winter's Chill",actionId:D.fromSpellId(28593),playerData:Cr(n.ClassMage,"wintersChill",(e=>e.getRotation().type==W.Frost))}]},{label:"Spell Hit",effects:[{label:"Misery",actionId:D.fromSpellId(33198),playerData:vr(t.SpecShadowPriest,"misery")},{label:"Improved Faerie Fire",actionId:D.fromSpellId(33602),playerData:vr(t.SpecBalanceDruid,"improvedFaerieFire")}]},{label:"Spell Dmg",effects:[{label:"Ebon Plaguebringer",actionId:D.fromSpellId(51161),playerData:Cr(n.ClassDeathknight,"ebonPlaguebringer")},{label:"Earth and Moon",actionId:D.fromSpellId(48511),playerData:vr(t.SpecBalanceDruid,"earthAndMoon")},{label:"Curse of Elements",actionId:D.fromSpellId(47865),playerData:kr(n.ClassWarlock,(e=>e.getRotation().curse==v.Elements))}]}]},{label:"Mitigation Debuffs",categories:[{label:"Atk Pwr",effects:[{label:"Vindication",actionId:D.fromSpellId(26016),playerData:Cr(n.ClassPaladin,"vindication",(e=>[t.SpecRetributionPaladin,t.SpecProtectionPaladin].includes(e.spec)))},{label:"Improved Demoralizing Shout",actionId:D.fromSpellId(12879),playerData:Cr(n.ClassWarrior,"improvedDemoralizingShout",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainDemoShout||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().demoShoutChoice))},{label:"Demoralizing Shout",actionId:D.fromSpellId(47437),playerData:Rr(n.ClassWarrior,"improvedDemoralizingShout",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainDemoShout||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().demoShoutChoice))},{label:"Improved Demoralizing Roar",actionId:D.fromSpellId(16862),playerData:vr(t.SpecFeralTankDruid,"feralAggression",(e=>e.getRotation().maintainDemoralizingRoar))},{label:"Demoralizing Roar",actionId:D.fromSpellId(48560),playerData:(Ar=t.SpecFeralTankDruid,Or="feralAggression",Hr=e=>e.getRotation().maintainDemoralizingRoar,wr(Ar,Or,!0,Hr))},{label:"Improved Curse of Weakness",actionId:D.fromSpellId(18180),playerData:Cr(n.ClassWarlock,"improvedCurseOfWeakness",(e=>e.getRotation().curse==v.Weakness))},{label:"Curse of Weakness",actionId:D.fromSpellId(50511),playerData:Cr(n.ClassWarlock,"improvedCurseOfWeakness",(e=>e.getRotation().curse==v.Weakness))},{label:"Demoralizing Screech",actionId:D.fromSpellId(55487),playerData:kr(n.ClassHunter,(e=>e.getSpecOptions().petType==w.CarrionBird))}]},{label:"Atk Speed",effects:[{label:"Improved Thunder Clap",actionId:D.fromSpellId(12666),playerData:Cr(n.ClassWarrior,"improvedThunderClap",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainThunderClap||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().thunderClapChoice))},{label:"Thunder Clap",actionId:D.fromSpellId(47502),playerData:Rr(n.ClassWarrior,"improvedThunderClap",(e=>e.spec==t.SpecWarrior&&e.getRotation().maintainThunderClap||e.spec==t.SpecProtectionWarrior&&0!=e.getRotation().thunderClapChoice))},{label:"Improved Frost Fever",actionId:D.fromSpellId(51456),playerData:Cr(n.ClassDeathknight,"improvedIcyTouch")},{label:"Frost Fever",actionId:D.fromSpellId(51456),playerData:Rr(n.ClassDeathknight,"improvedIcyTouch")},{label:"Judgements of the Just",actionId:D.fromSpellId(53696),playerData:Cr(n.ClassPaladin,"judgementsOfTheJust")},{label:"Infected Wounds",actionId:D.fromSpellId(48485),playerData:Cr(n.ClassDruid,"infectedWounds",(e=>[t.SpecFeralDruid,t.SpecFeralTankDruid].includes(e.spec)))}]},{label:"Miss",effects:[{label:"Insect Swarm",actionId:D.fromSpellId(65855),playerData:vr(t.SpecBalanceDruid,"insectSwarm")},{label:"Scorpid Sting",actionId:D.fromSpellId(3043),playerData:kr(n.ClassHunter,(e=>e.getRotation().sting==T.ScorpidSting))}]}]}]};var Ar,Or,Hr;class Fr extends ue{constructor(e,t){super(e,t,{identifier:"raid-tab",title:"Raid"}),this.simUI=t,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new ur(this.leftPanel,this.simUI),new Ir(this.leftPanel,this.simUI);const e=new ge(this.rightPanel,this.simUI,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:e=>M.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(e,t,a)=>{c.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(e,a.raid||L.create()),this.simUI.blessingsPicker.setAssignments(e,a.blessings||N.create()),a.faction&&this.simUI.sim.setFaction(e,a.faction),a.phase&&this.simUI.sim.setPhase(e,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(e,t)=>M.equals(e,t),toJson:e=>M.toJson(e),fromJson:e=>M.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}}class Wr extends G{constructor(e,t,a,s){super(e,"raid-target-picker-root",a,s),this.rootElem.classList.add("dropdown"),this.config=s,this.raid=t,this.curPlayer=this.raid.getPlayerFromRaidTarget(s.getValue(a)),this.curRaidTarget=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(e=>e.preventDefault())),this.currentOptions=[],this.updateOptions(c.nextEventID()),s.compChangeEmitter.on((e=>this.updateOptions(e))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((e=>null!=e)).map((e=>({player:e,isDropdown:!0})))]}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((e=>this.dropdownElem.appendChild(this.makeOption(e))));const t=this.curRaidTarget;this.curRaidTarget=this.getInputValue(),$.equals(t,this.curRaidTarget)?this.setInputValue(this.curRaidTarget):this.inputChanged(e)}makeOption(e){const t=Wr.makeOptionElem(e);return t.addEventListener("click",(t=>{t.preventDefault(),this.curPlayer=e.player,this.curRaidTarget=this.getInputValue(),this.inputChanged(c.nextEventID())})),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeRaidTarget():j()}setInputValue(e){this.curRaidTarget=$.clone(e),this.curPlayer=this.raid.getPlayerFromRaidTarget(this.curRaidTarget);const t=this.currentOptions.find((e=>e.player==this.curPlayer));t&&(this.buttonElem.innerHTML=Wr.makeOptionElem({player:t.player}).outerHTML)}static makeOptionElem(e){const t=e.player?m(e.player.getClass()):"";let a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${t?`bg-${t}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${e.player?`<img class="player-icon" src="${e.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${t?`text-${t}`:""}">\n\t\t\t\t\t\t\t${e.player?e.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,e.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class Br extends l{constructor(e,t){super(e,"assignments-picker-root"),this.changeEmitter=new c,this.raidSimUI=t,this.innervatesPicker=new Mr(this.rootElem,t),this.powerInfusionsPicker=new Lr(this.rootElem,t),this.tricksOfTheTradesPicker=new Nr(this.rootElem,t),this.unholyFrenzyPicker=new Gr(this.rootElem,t),this.focusMagicsPicker=new $r(this.rootElem,t)}}class xr extends l{constructor(e,t){super(e,"assigned-buff-picker-root"),this.changeEmitter=new c,this.raidSimUI=t,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((e=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=e.map(((e,t)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);let s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Wr.makeOptionElem({player:e,isDropdown:!1})),a.appendChild(s);const r=document.createElement("i");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(r);const n=new Wr(a,this.raidSimUI.sim.raid,e,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,a)=>this.setPlayerValue(e,t,a)}),i={player:e,targetPicker:n,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromRaidTarget(n.getInputValue())};return n.changeEmitter.on((e=>{i.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromRaidTarget(n.getInputValue())})),i}))}}class Mr extends xr{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassDruid)))}getPlayerValue(e){return e.getSpecOptions().innervateTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.innervateTarget=a,t.setSpecOptions(e,s)}}class Lr extends xr{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassPriest)&&e.getTalents().powerInfusion))}getPlayerValue(e){return e.getSpecOptions().powerInfusionTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.powerInfusionTarget=a,t.setSpecOptions(e,s)}}class Nr extends xr{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassRogue)))}getPlayerValue(e){return e.getSpecOptions().tricksOfTheTradeTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.tricksOfTheTradeTarget=a,t.setSpecOptions(e,s)}}class Gr extends xr{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassDeathknight)&&e.getTalents().hysteria))}getPlayerValue(e){return e.getSpecOptions().unholyFrenzyTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.unholyFrenzyTarget=a,t.setSpecOptions(e,s)}}class $r extends xr{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(n.ClassMage)))}getPlayerValue(e){return e.getSpecOptions().focusMagicTarget||j()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.focusMagicTarget=a,t.setSpecOptions(e,s)}}class jr extends l{constructor(e,t){super(e,"blessings-picker-root"),this.changeEmitter=new c,this.pickers=[],this.simUI=t,this.assignments=N.clone(V(4));const a=K.filter((e=>hr.includes(e))).filter((e=>!ye.includes(e))),s=[...Array(4).keys()];a.map((e=>{const t=document.createElement("div");t.classList.add("blessings-picker-row"),this.rootElem.appendChild(t),t.append(this.buildSpecIcon(e));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),t.appendChild(a),s.forEach((t=>{this.pickers[t]||this.pickers.push([]);const s=new fe(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:q[n.ClassPaladin],value:z.BlessingUnknown},{actionId:D.fromSpellId(25898),value:z.BlessingOfKings},{actionId:D.fromSpellId(48934),value:z.BlessingOfMight},{actionId:D.fromSpellId(48938),value:z.BlessingOfWisdom},{actionId:D.fromSpellId(25899),value:z.BlessingOfSanctuary}],equals:(e,t)=>e==t,zeroValue:z.BlessingUnknown,enableWhen:e=>{const a=Math.min(this.simUI.getClassCount(n.ClassPaladin),4);return t<a},changedEvent:e=>e.changeEmitter,getValue:a=>a.assignments.paladins[t]?.blessings[e]||z.BlessingUnknown,setValue:(a,s,r)=>{s.assignments.paladins[t].blessings[e]!=r&&(s.assignments.paladins[t].blessings[e]=r,this.changeEmitter.emit(a))}});this.pickers[t].push(s)})),t})),this.updatePickers(),this.simUI.compChangeEmitter.on((e=>this.updatePickers()))}updatePickers(){for(let e=0;e<4;e++)this.pickers[e].forEach((e=>e.update()))}buildSpecIcon(t){let a=document.createElement("fragment");a.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${J[t]}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t\tdata-bs-toggle="tooltip"\n\t\t\t\t\tdata-bs-title="${i[t]}"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=a.querySelector(".blessings-spec-icon");return e.getOrCreateInstance(s),a.children[0]}getAssignments(){return N.clone(this.assignments)}setAssignments(e,t){this.assignments=N.clone(t),this.changeEmitter.emit(e)}}class Vr extends l{constructor(e,t){super(e,"tanks-picker-root"),this.raidSimUI=t;const a=this.raidSimUI.sim.raid;for(let s=0;s<4;s++){const e=document.createElement("div");e.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(e);const t=document.createElement("label");t.textContent=0==s?"Main Tank":`Tank ${s+1}`,t.classList.add("tank-picker-label","form-label"),e.appendChild(t),new Wr(e,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[s]||j(),setValue:(e,t,a)=>{const r=t.getTanks();for(let n=0;n<s;n++)r[n]||r.push(j());r[s]=a,t.setTanks(e,r)}})}}}class qr extends ue{constructor(e,t){super(e,t,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=t,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildOtherSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const e=new Se(this.column1,"encounter-settings",{header:{title:"Encounter"}});new Ie(e.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const e=new Se(this.column1,"consumes-settings",{header:{title:"Consumables"}});let t=document.createElement("div");t.classList.add("consumes-container"),e.bodyElement.appendChild(t),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(37094),"scrollOfStamina"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(43466),"scrollOfStrength"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(43464),"scrollOfAgility"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(37092),"scrollOfIntellect"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(37098),"scrollOfSpirit"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(43468),"scrollOfProtection"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(49633),"drumsOfForgottenKings"),this.makeBooleanRaidIconBuffInput(t,D.fromItemId(49634),"drumsOfTheWild")}buildOtherSettings(){}buildTankSettings(){const e=new Se(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Vr(e.bodyElement,this.simUI)}buildAssignmentSettings(){const e=new Se(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new Br(e.bodyElement,this.simUI)}buildBlessingsPicker(){const e=new Se(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:be}});this.simUI.blessingsPicker=new jr(e.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((e=>this.simUI.changeEmitter.emit(e)))}buildSavedDataPickers(){const e=new ge(this.rightPanel,this.simUI,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:e=>_.create({encounter:e.toProto()}),setData:(e,t,a)=>t.fromProto(e,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(e,t)=>_.equals(e,t),toJson:e=>_.toJson(e),fromJson:e=>_.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}makeBooleanRaidIconBuffInput(e,t,a){const s=this.simUI.sim.raid;return new Pe(e,s,{id:t,states:2,changedEvent:e=>e.buffsChangeEmitter,getValue:e=>e.getBuffs()[a],setValue:(e,t,s)=>{const r=t.getBuffs();r[a]=s,t.setBuffs(e,r)}})}}class zr extends De{constructor(e,t){super(e,t,"JSON Import",!0),this.simUI=t,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(e){const t=X.fromJsonString(e,{ignoreUnknownFields:!0});this.simUI.fromProto(c.nextEventID(),t),this.close()}}class Jr extends ke{constructor(e,t){super(e,t,"JSON Export",!0),this.simUI=t,this.init()}getData(){return JSON.stringify(X.toJson(this.simUI.toProto()),null,2)}}class Kr extends De{constructor(e,t){super(e,t,"WCL Import",!1),this.queryCounter=0,this.token="",this.simUI=t,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Heroic Presence, Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const e=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),t=await e.json();this.token=t.access_token}return this.token}async queryWCL(e){const t={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:t}),r=await s.json();if(r?.errors?.length){const t=r.errors.map((e=>e.message)).join("\n");throw new Error(`GraphQL error: ${t}\n\nQuery: ${e}`)}return console.debug(`WCL query: ${e}\n\nResult: ${JSON.stringify(r)}`),r}async parseURL(e){const t=e.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!t)throw new Error(`Invalid WCL URL ${e}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:t[1],fightID:""};if(t[2]&&t[3]&&"last"!=t[3])a.fightID=t[3];else{const e=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(e)).data.reportData.report.fights;"last"==t[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(e)}catch(t){alert("Failed import from WCL: "+t)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(e){if(!e.length)throw new Error("No import link provided!");const t=await this.parseURL(e);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${t.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${t.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${t.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${t.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[Qr,Zr].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${t.fightID}], dataType:Casts, filterExpression: "${[Yr].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${t.fightID}], dataType:Healing, filterExpression: "${[en,tn].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${t.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,r=s.playerDetails.data.entries;c.freezeAllAndDo((()=>{const e=c.nextEventID(),t=r.map((t=>new _r(t,this.simUI,e)));this.inferRace(e,s,t),this.inferProfessions(e,s,t),this.inferAssignments(e,s,t),this.inferPartyComposition(e,s,t);const a=t.filter((e=>e.player.getClass()==n.ClassPaladin)).length,i=X.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(t),blessings:V(a)});this.simUI.clearRaid(e),this.simUI.fromProto(e,i)})),this.close()}inferRace(e,t,r){r.forEach((t=>t.player.setRace(e,s.RaceUnknown)));let n=t.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||a.Horde;t.combatantInfoEvents.data.forEach((t=>{t.auras.filter((e=>28878==e.ability)).forEach((t=>{const i=r.find((e=>e.id==t.source));i&&i.player.getRace()!=s.RaceDraenei&&(console.log(`Inferring player ${i.name} has race ${Q[s.RaceDraenei]} from Heroic Presence aura event`),i.player.setRace(e,s.RaceDraenei),n=a.Alliance)}))}));const i=Z(t.reportCastEvents.data,(e=>String(e.abilityGameID)));Qr.forEach((t=>{(i[t.id]||[]).forEach((a=>{const s=r.find((e=>e.id==a.sourceID));s&&(console.log(`Inferring player ${s.name} has race ${Q[t.race]} from ${t.name} event`),s.player.setRace(e,t.race),n=Y[t.race])}))})),r.forEach((t=>{t.player.getRace()==s.RaceUnknown&&t.player.setRace(e,t.preset.defaultFactionRaces[n])}))}inferProfessions(e,t,a){const s=Z(t.reportCastEvents.data,(e=>String(e.abilityGameID)));Zr.forEach((e=>{(s[e.id]||[]).forEach((t=>{const s=a.find((e=>e.id==t.sourceID));s&&!s.inferredProfessions.includes(e.profession)&&(console.log(`Inferring player ${s.name} has profession ${ee[e.profession]} from ${e.name} event`),s.inferredProfessions.push(e.profession))}))})),a.forEach((t=>{let a=te(t.inferredProfessions.concat(t.player.getGear().getProfessionRequirements()));0==a.length?a=[f.Engineering,f.Jewelcrafting]:1==a.length&&(a[0]!=f.Engineering?a.push(f.Engineering):a.push(f.Jewelcrafting)),t.player.setProfessions(e,a)}))}inferAssignments(e,t,a){const s=Z(t.fightCastEvents.data,(e=>String(e.abilityGameID)));Yr.forEach((t=>{(s[t.id]||[]).forEach((s=>{const r=a.find((e=>e.id==s.sourceID)),n=a.find((e=>e.id==s.targetID));if(r&&n&&r.player.getClass()==t.class){const a=t.applyFunc(r.player,n.toRaidTarget());r.player.setSpecOptions(e,a),console.log(`Inferring player ${r.name} is targeting ${n.name} with ${t.name} from cast event`)}}))}))}inferPartyComposition(e,t,a){const s=(e,t,a)=>{(e.addPlayerInParty(t)||t.addPlayerInParty(e))&&console.log(`Inferring players ${e.name} and ${t.name} in same party from ${a} event`)},r=Z(t.fightHealEvents.data,(e=>String(e.abilityGameID)));en.forEach((e=>{(r[e.id]||[]).forEach((t=>{const r=a.find((e=>e.id==t.sourceID)),n=a.find((e=>e.id==t.targetID));r&&n&&s(r,n,e.name)}))})),tn.forEach((e=>{const t=r[e.id]||[],n=Z(t,(e=>String(e.timestamp)+String(e.sourceID)));for(const[r,i]of Object.entries(n)){const t=i.map((e=>a.find((t=>t.id==e.targetID))));for(let a=0;a<t.length;a++)for(let r=0;r<t.length;r++)a!=r&&t[a]&&t[r]&&s(t[a],t[r],e.name)}})),t.combatantInfoEvents.data.forEach((e=>{const t=a.find((t=>t.id==e.sourceID));e.auras.filter((e=>28878==e.ability)).forEach((e=>{const r=a.find((t=>t.id==e.source));r&&t&&s(r,t,"Heroic Presence")}))}));let n=a.filter((e=>e.playersInParty.length>0)),i=0;for(;n.length>0;){let e=[n[0]].concat(n[0].playersInParty),t=0;for(;e.length!=t;)t=e.length,e=te(e.map((e=>[e].concat(e.playersInParty))).flat());const a=i;i++,e.forEach(((e,t)=>{e.raidIndex=5*a+t})),n=n.filter((t=>!e.includes(t)))}const l=[...Array(40).keys()];a.filter((e=>-1==e.raidIndex)).forEach((e=>{const t=l.find((e=>!a.some((t=>t.raidIndex==e))))??-1;if(-1==t)throw new Error("Invalid next idx");e.raidIndex=t}))}getEncounterProto(e){const t=e.fights[0],a=ae.create({duration:(t.endTime-t.startTime)/1e3,targets:[]});let s=this.simUI.sim.db.getAllPresetEncounters().find((e=>e.path.includes(t.name)));return s&&s.targets.length&&s.targets.map((e=>e.target)).filter((e=>void 0!==e)).forEach((e=>a.targets.push(e))),0===a.targets.length&&a.targets.push(Ee.defaultProto()),a}getRaidProto(e){const t=L.create({parties:[...new Array(Ce).keys()].map((e=>se.create({players:[...new Array(5).keys()].map((e=>d.create()))})))});return e.forEach((e=>{const a=e.raidIndex%5,s=(e.raidIndex-a)/5,r=e.player.toProto();t.parties[s].players[a]=r,y(p(r))&&t.tanks.push(e.toRaidTarget())})),t}}class _r{constructor(e,t,a){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=t,this.data=e,this.name=e.name,this.id=e.id,this.type=e.type;const s=e.icon.split("-")[1];this.fullType=this.type+s,console.log(`WCL spec: ${this.fullType}`);const r=Xr[this.fullType]??null;if(null==r)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=r,this.player=new me(this.spec,t.sim),this.preset=_r.getMatchingPreset(r,e.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:e.talents}).toString());this.player.applySharedDefaults(a),this.player.setTalentsString(a,this.preset.talents.talentsString),this.player.setGlyphs(a,this.preset.talents.glyphs),this.player.setConsumes(a,this.preset.consumes),this.player.setRotation(a,this.preset.rotation),this.player.setSpecOptions(a,this.preset.specOptions),this.player.setProfessions(a,[f.Engineering,f.Jewelcrafting]),this.player.setName(a,e.name),this.player.setGear(a,t.sim.db.lookupEquipmentSpec(re.create({items:e.gear.map((e=>ne.create({id:e.id,enchant:e.permanentEnchant,gems:e.gems?e.gems.map((e=>e.id)):[]})))})))}static getMatchingPreset(e,t){const a=mr.filter((t=>t.spec==e));let s=0;if(a&&a.length>1){let e=999;a.forEach(((a,r)=>{const n=ie(a.talents.talentsString),i=n.reduce(((e,a,s)=>e+Math.abs(t[s]?.guid-n[s])),0);i<e&&(s=r,e=i)}))}return a[s]}toRaidTarget(){return $.create({targetIndex:this.raidIndex})}addPlayerInParty(e){return e!=this&&!this.playersInParty.includes(e)&&(this.playersInParty.push(e),!0)}}const Xr={DeathKnightBlood:t.SpecTankDeathknight,DeathKnightLichborne:t.SpecTankDeathknight,DeathKnightRuneblade:t.SpecDeathknight,DeathKnightFrost:t.SpecDeathknight,DeathKnightUnholy:t.SpecDeathknight,DruidBalance:t.SpecBalanceDruid,DruidFeral:t.SpecFeralDruid,DruidWarden:t.SpecFeralTankDruid,DruidGuardian:t.SpecFeralTankDruid,DruidRestoration:t.SpecRestorationDruid,HunterBeastMastery:t.SpecHunter,HunterSurvival:t.SpecHunter,HunterMarksmanship:t.SpecHunter,MageArcane:t.SpecMage,MageFire:t.SpecMage,MageFrost:t.SpecMage,PaladinHoly:t.SpecHolyPaladin,PaladinJusticar:t.SpecProtectionPaladin,PaladinProtection:t.SpecProtectionPaladin,PaladinRetribution:t.SpecRetributionPaladin,PriestHoly:t.SpecHealingPriest,PriestDiscipline:t.SpecHealingPriest,PriestShadow:t.SpecShadowPriest,PriestSmite:t.SpecSmitePriest,RogueAssassination:t.SpecRogue,RogueCombat:t.SpecRogue,RogueSubtlety:t.SpecRogue,ShamanElemental:t.SpecElementalShaman,ShamanEnhancement:t.SpecEnhancementShaman,ShamanRestoration:t.SpecRestorationShaman,WarlockDestruction:t.SpecWarlock,WarlockAffliction:t.SpecWarlock,WarlockDemonology:t.SpecWarlock,WarriorArms:t.SpecWarrior,WarriorFury:t.SpecWarrior,WarriorChampion:t.SpecWarrior,WarriorWarrior:t.SpecWarrior,WarriorGladiator:t.SpecWarrior,WarriorProtection:t.SpecProtectionWarrior},Qr=[{id:25046,name:"Arcane Torrent (Energy)",race:s.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:s.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:s.RaceBloodElf},{id:26297,name:"Berserking",race:s.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:s.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:s.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:s.RaceOrc},{id:20589,name:"Escape Artist",race:s.RaceGnome},{id:20594,name:"Stoneform",race:s.RaceDwarf},{id:20549,name:"War Stomp",race:s.RaceTauren},{id:7744,name:"Will of the Forsaken",race:s.RaceUndead},{id:59752,name:"Will to Survive",race:s.RaceHuman}],Zr=[{id:55503,name:"Lifeblood",profession:f.Herbalism},{id:50305,name:"Skinning",profession:f.Skinning}],Yr=[{id:29166,name:"Innervate",class:n.ClassDruid,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.innervateTarget=t,a}},{id:10060,name:"Power Infusion",class:n.ClassPriest,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.powerInfusionTarget=t,a}},{id:57933,name:"Tricks of the Trade",class:n.ClassRogue,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.tricksOfTheTradeTarget=t,a}},{id:49016,name:"Unholy Frenzy",class:n.ClassDeathknight,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.unholyFrenzyTarget=t,a}}],en=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],tn=[{id:48072,name:"Prayer of Healing"}],an=[];new class extends Re{constructor(e,t){super(e,new we,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,launchStatus:ve,knownIssues:(t.knownIssues||[]).concat(an)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new c,this.changeEmitter=new c,this.referenceChangeEmitter=new c,this.config=t,this.sim.raid.compChangeEmitter.on((e=>this.compChangeEmitter.emit(e))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((e=>this.modifyRaidProto(e))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab(),this.addLogTab()}loadSettings(){const e=c.nextEventID();c.freezeAllAndDo((()=>{let t=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=X.fromJsonString(a);this.fromProto(e,s),t=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}t||this.applyDefaults(e),this.changeEmitter.on((e=>{const t=X.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),t)}))}))}addSidebarComponents(){this.raidSimResultsManager=le(this),this.raidSimResultsManager.changeEmitter.on((e=>this.referenceChangeEmitter.emit(e)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(e=>new zr(this.rootElem,this))),this.simHeader.addImportLink("WCL",(e=>new Kr(this.rootElem,this))),this.simHeader.addExportLink("JSON",(e=>new Jr(this.rootElem,this)))}addRaidTab(){new Fr(this.simTabContentsContainer,this)}addSettingsTab(){new qr(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new oe(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}addLogTab(){this.addTab("Log","log-tab",'\n\t\t\t<div class="log-runner">\n\t\t\t</div>\n\t\t'),new Te(this.rootElem.getElementsByClassName("log-runner")[0],this)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){const t=this.getClassCount(n.ClassPaladin),a=this.blessingsPicker.getAssignments();hr.forEach((s=>{const r=e.parties.map((e=>e.players.filter((e=>e.class!=n.ClassUnknown&&p(e)==s)))).flat();a.paladins.forEach(((e,a)=>{a>=t||(e.blessings[s]==z.BlessingOfKings?r.forEach((e=>e.buffs.blessingOfKings=!0)):e.blessings[s]==z.BlessingOfMight?r.forEach((e=>e.buffs.blessingOfMight=ce.TristateEffectImproved)):e.blessings[s]==z.BlessingOfWisdom?r.forEach((e=>e.buffs.blessingOfWisdom=ce.TristateEffectImproved)):e.blessings[s]==z.BlessingOfSanctuary&&r.forEach((e=>e.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(e){return this.getActivePlayers().filter((t=>t.isClass(e))).length}applyDefaults(e){c.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,L.create({numActiveParties:5})),this.sim.setPhase(e,1),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)}))}toProto(){return X.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const t=X.toBinary(e),a=pako.deflate(t,{to:"string"}),s=btoa(String.fromCharCode(...a)),r=new URL(window.location.href);return r.hash=s,r.toString()}fromProto(e,t){c.freezeAllAndDo((()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||L.create()),this.sim.encounter.fromProto(e,t.encounter||ae.create()),this.blessingsPicker.setAssignments(e,t.blessings||N.create())}))}clearRaid(e){this.sim.raid.clear(e)}getStorageKey(e){return"__wotlk_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-3d94c642.entry.js.map
