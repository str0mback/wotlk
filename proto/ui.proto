syntax = "proto3";
package proto;

option go_package = "./proto";

import "api.proto";
import "common.proto";
import "paladin.proto";

// Holds all WoW data for the UI.
message UIDatabase {
	repeated UIItem items = 1;
	repeated UIEnchant enchants = 2;
	repeated UIGem gems = 3;
	repeated PresetEncounter encounters = 6;

	// Entities for which we just need a name/icon.
	repeated IconData item_icons = 4;
	repeated IconData spell_icons = 5;
}

// Contains all information about an Item needed by the UI.
// Generally this will include everything needed by the sim, plus some
// additional data for displaying / filtering.
message UIItem {
	int32 id = 1;
	string name = 2;
	string icon = 3;

	ItemType type = 4;
	ArmorType armor_type = 5;
	WeaponType weapon_type = 6;
	HandType hand_type = 7;
	RangedWeaponType ranged_weapon_type = 8;

	repeated double stats = 9;
	repeated GemColor gem_sockets = 10;
	repeated double socketBonus = 11;

	// Weapon stats, needed for computing proper EP for melee weapons
	double weapon_damage_min = 12;
	double weapon_damage_max = 13;
	double weapon_speed = 14;

	int32 ilvl = 15;
	int32 phase = 16;
	ItemQuality quality = 17;
	bool unique = 18;
	bool heroic = 19;

	// Classes that are allowed to use the item. Empty indicates no special class restrictions.
	repeated Class class_allowlist = 20;
	Profession required_profession = 21;

	// Name of the item set to which this item belongs, if any.
	string set_name = 22;
}

message UIEnchant {
	// All enchants have an effect ID. Some also have an item ID, others have a spell ID,
	// and yet others have both item and spell IDs. No single ID alone is enough to
	// uniquely identify an enchant. Uniqueness requires either effect ID + slot, or
	// effect ID + item/spell ID.
	int32 effect_id = 1; // ID of the effect.
	int32 item_id = 2;   // ID of the enchant "item". Might be 0 if not available.
	int32 spell_id = 3;  // ID of the enchant "spell". Might be 0 if not available.

	string name = 4;     
	string icon = 5;

	ItemType type = 6;                  // Which type of item this enchant can be applied to.
	repeated ItemType extra_types = 13; // Extra types for enchants that can go in multiple slots (like armor kits).
	EnchantType enchant_type = 7;

	repeated double stats = 8;

	ItemQuality quality = 9;
	int32 phase = 10;

	// Classes that are allowed to use the enchant. Empty indicates no special class restrictions.
	repeated Class class_allowlist = 11;
	Profession required_profession = 12;
}

message UIGem {
	int32 id = 1;
	string name = 2;
	string icon = 3;
	GemColor color = 4;

	repeated double stats = 5;

	int32 phase = 6;
	ItemQuality quality = 7;
	bool unique = 8;
	Profession required_profession = 9;
}

message IconData {
	int32 id = 1;
	string name = 2;
	string icon = 3;
}

message DatabaseFilters {
	// TODO:
	// Source
	// Raid
	// Req. Profession

	repeated ArmorType armor_types = 1;
	repeated WeaponType weapon_types = 2;

	double min_mh_weapon_speed = 4;
	double max_mh_weapon_speed = 5;
	double min_oh_weapon_speed = 9;
	double max_oh_weapon_speed = 10;

	bool one_handed_weapons = 6;
	bool two_handed_weapons = 7;
	bool matching_gems_only = 8;

	// Item IDs for favorited items.
	repeated int32 favorite_items = 11;
	// Item IDs for favorited gems.
	repeated int32 favorite_gems = 12;
	// Uniquely-identifying strings for favorited enchants.
	repeated string favorite_enchants = 13;
}

message SimSettings {
	int32 iterations = 1;
	int32 phase = 2;
	int64 fixed_rng_seed = 3;
	bool show_damage_metrics = 8;
	bool show_threat_metrics = 4;
	bool show_healing_metrics = 7;
	bool show_experimental = 5;
	string language = 9;
	Faction faction = 6;
	DatabaseFilters filters = 10;
}

// Contains all information that is imported/exported from an individual sim.
message IndividualSimSettings {
	SimSettings settings = 5;
	RaidBuffs raid_buffs = 1;
	Debuffs debuffs = 8;
	repeated RaidTarget tanks = 7;
	PartyBuffs party_buffs = 2;
	Player player = 3;
	Encounter encounter = 4;
	int32 target_dummies = 9;
	// Deprecate after 2 months (on 2023/02/13)
	repeated double ep_weights = 6;
	UnitStats ep_weights_stats = 10;
}

// Local storage data for gear settings.
message SavedGearSet {
	EquipmentSpec gear = 1;
	// Deprecate after 2 months (on 2023/02/13)
	repeated double bonus_stats = 2;
	UnitStats bonus_stats_stats = 3;
}

// Local storage data for other settings.
message SavedSettings {
	RaidBuffs raid_buffs = 1;
	PartyBuffs party_buffs = 2;
	Debuffs debuffs = 7;
	IndividualBuffs player_buffs = 3;
	Consumes consumes = 4;
	Race race = 5;
	Cooldowns cooldowns = 6;
	string rotation_json = 8;
}

message SavedTalents {
	string talents_string = 1;
	Glyphs glyphs = 2;
}

// A buff bot placed in a raid.
message BuffBot {
	// Uniquely identifies which buffbot this is.
	string id = 1;

	int32 raid_index = 2;

	// The assigned player to innervate. Only used for druid buffbots.
	RaidTarget innervate_assignment = 3;

	// The assigned player to PI. Only used for disc priest buffbots.
	RaidTarget power_infusion_assignment = 4;

	RaidTarget tricks_of_the_trade_assignment = 5;

	RaidTarget unholy_frenzy_assignment = 6;
}

message BlessingsAssignment {
	// Index corresponds to Spec that the blessing should be applied to.
	repeated Blessings blessings = 1;
}

message BlessingsAssignments {
	// Assignments for each paladin.
	repeated BlessingsAssignment paladins = 1;
}

// Local storage data for a saved encounter.
message SavedEncounter {
	Encounter encounter = 1;
}

// Local storage data for raid sim settings.
message SavedRaid {
	Raid raid = 1;
	repeated BuffBot buff_bots = 2;
	BlessingsAssignments blessings = 3;
	Faction faction = 4;
	int32 phase = 5;
}

// Contains all information that is imported/exported from a raid sim.
message RaidSimSettings {
	SimSettings settings = 5;
	Raid raid = 1;
	repeated BuffBot buff_bots = 2;
	BlessingsAssignments blessings = 3;
	Encounter encounter = 4;
}

// All the data related to running the sim once.
message SimRun {
	RaidSimRequest request = 1;
	RaidSimResult result = 2;
}

// Contains a sim run and also other context data.
message SimRunData {
	SimRun run = 1;

	// The run stored as a reference, for comparison to the current run.
	SimRun reference_run = 2;
}

// Sent by the sim to the detailed results page.
message DetailedResultsUpdate {
	oneof data {
		// Show results from a run.
		SimRunData run_data = 1;

		// Update sim settings.
		SimSettings settings = 2;
	}
}
